use uo;
use os;
use npc;
use util;

include "include/client";
include "include/objtype";
include "include/eventid";
include "include/utility";
include "../pkg/npcs/npc_util";
include "../pkg/npcs/main_ai/combat/pathfinding";

var me := Self ();


program warrior_fight_ai ()

	var opponent_serial := GetObjProperty (me, "opponent");
	if (!opponent_serial)
		ExitFightMode();
		return;
	endif
	EraseObjProperty (me, "opponent");
	var opponent := SystemFindObjectBySerial (opponent_serial);

	if (opponent.cmdlevel or opponent == me)
		ExitFightMode ();
		return;
	endif

	if (opponent.script["humuc"])
		ExitFightMode ();
		return;
	endif

	SetOpponent ( opponent );
	TurnToward  ( opponent );

	if ( GetObjProperty (me, "keywordbattlecry") )
		Say ( GetObjProperty (me, "keywordbattlecry") );
	endif

	var ev;
	var chaseloop := 0;
	var loops := 1;
	var wasmoving:=1;
	var event_wait_time := 0;
	//var cd;

    	while ( opponent and !opponent.dead and !opponent.hidden and !opponent.concealed and
			(Distance (me, opponent) < 20) )

		if (me.poisoned)
			ApplyHealing ();
		elseif (GetVital (me, "Life") < GetVitalMaximumValue (me, "Life"))
			ApplyHealing();
		elseif (GetVital (me, "Life") < 1000)
			Flee (opponent);
		endif

		case (CloseDistance ( opponent ))
			0:
				event_wait_time := 0;
				wasmoving := 1;
				loops := loops + 1;
				if (loops > 25)
					if ( HasBow() )
						ChangeWeapons ();
					endif
					chaseloop := chaseloop + 1;
					loops := 0;
					RunRandom(opponent, chaseloop);
					if (chaseloop > 5)
						sleep(2);
						loops := 0;
						chaseloop := 0;
						flee(opponent);
					endif
				endif
			1:
				event_wait_time := 1;
				if (wasmoving)
					TurnToward(opponent);
				endif
				if (!CheckLoSAt (me, opponent.x, opponent.y, opponent.z))
					ExitFightMode ();
					return;
				endif
				loops := 0;
				chaseloop := 0;
				wasmoving := 0;
			2:
				ExitFightMode ();
				return;
		endcase

		ev := wait_for_event (event_wait_time);
		case (ev.type)
			EVID_DAMAGED:
			EVID_ENGAGED:
				if (ev.source)
					if (ev.source != opponent)
						if ( (RandomInt(6)==0) or (Distance (ev.source, me) < Distance (me, opponent)) )
							opponent := ev.source;
							SetOpponent ( opponent );
							turntoward ( opponent );
						endif
					endif
				endif
			EVID_PEACEMADE:
				ExitFightMode ();
				return;
		endcase
		OpenDoors(opponent);
	endwhile

	ExitFightMode ();

endprogram

function in_combat_event_loop (byref opponent)
	if (opponent)
	endif
endfunction

function process_combat_event (byref ev)
	if (ev.type == EVID_DAMAGED)
		if (10 * GetVital (me, "Life") < GetVitalMaximumValue (me, "Life")/10)
			EraseObjProperty (me, "#flees");
			Flee (ev.source);
		endif
	endif
endfunction


function CloseDistance (byref opponent)

	var archerymovement := HasBow();
	var d := distance(me, opponent);

	if ( d > 15 )
		return 2;
	endif

	if (!archerymovement)
		if ( d > 1 )
			RunToward( opponent );
			return 0;
		else
			return 1;
		endif
	else
		if ( d < 4 )
			RunAwayFrom(opponent);
			return 0;
		else
			return 1;
		endif
	endif

endfunction

function HasBow ()

	var ammotype := 0;
	var bowarmed := 0;
	var weapon := me.weapon;
	if (!weapon.objtype)
		ChangeWeapons ();
		return 0;
	endif
	case (weapon.objtype)
		0x13B2:
		0x26c2:
		0x27f0:
		0x2d2a:
		0x2d2b:
			bowarmed := 1;
			ammotype := 0xf3f;//bow and arrows
		0x0f4f:
		0x13fd:
		0x26c3:
			bowarmed := 1;
			ammotype := 0x1bfb;//xbow and bolts
		0x16050:
			bowarmed := 1;
			ammotype := 0x6051;//firebow and firearrows
		default: return 0;
	endcase
	if (!bowarmed) return 0; endif

	var myammo := EnumerateItemsInContainerOfObjtype(me.backpack, ammotype);

	if (!len(myammo))
		ChangeWeapons();
		return 0;
	else
		return 1;
	endif

endfunction

function ChangeWeapons()

	var weapon := GetEquipmentByLayer (me, LAYER_HAND1);
	var shield := GetEquipmentByLayer (me, LAYER_HAND2);

	if (weapon)
		MoveItemToContainer (weapon, me.backpack);
	endif
	if (shield)
		MoveItemToContainer (shield, me.backpack);
	endif

endfunction




///////////////////
//  ends the fight and returns the AI to its old script
///////////////////

function ExitFightMode ()

	SetWarMode (0);
	SetOpponent (0);
	me.script := GetObjProperty (me, "oldscript");
	EraseObjProperty (me, "oldscript");
	RestartScript( me );

endfunction