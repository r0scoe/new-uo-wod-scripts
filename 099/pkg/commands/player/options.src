use uo;
use os;

include "include/client";
include "include/objtype";
include "include/itemtypes";
include "include/accounts";
include "include/gumps";
include "include/utility";

Const BUTTON_OK				:= 99;
Const BUTTON_NEXT_PAGE			:= 98;
Const BUTTON_LAST_PAGE			:= 97;
Const BUTTON_CURRENT_PAGE		:= 96;
Const BUTTON_HELP				:= 95;
Const FINAL_PAGE				:= 8;

var blank_gump_layout := array {
	"nodispose",
	"page 0",
	"resizepic 20 20 5170 300 450",
	"button 240 420 2128 2129 1 0 " + BUTTON_OK,
	"button 50 420 2031 2032 1 0 " + BUTTON_HELP,
	"button 280 55 5601 5605 1 0 " + BUTTON_NEXT_PAGE,
	"button 40 55 5603 5607 1 0 " + BUTTON_LAST_PAGE
};

var blank_gump_data := array {
	"filler"
};

var current_page := 1;
var account_email;
var sell_bag_options;
var job_options;
var bard_options;
var autoheal_options;
var logoffcloneoptions;
var crafting_options;

program display_character_options (character)
	var acct := character.acct;
	if (!acct)
		SendSysMessage (character, "Hey, there - you're an NPC!");
		return;
	endif

	if (GetObjProperty (character, "#options_window"))
		if (GetProcess (GetObjProperty (character, "#options_window")))
			SendSysmessage (character, "That gump is already open!");
			return;
		endif
	endif
	SetObjProperty (character, "#options_window", GetPid());

	account_email := GetAccountProperty (character.acctname, "account_email");
	if (!account_email)
		account_email := "";
	endif

	sell_bag_options := acct.GetProp ("sell_options");
	if (!sell_bag_options or len (sell_bag_options) < 8)
		SendSysMessage (character, "Can't find 'sell bag' options - resetting to default");
		sell_bag_options := {0, 0, 0, 0, 0, 0, 0, 0, 0};
	elseif (len (sell_bag_options) < 9)
		repeat
			sell_bag_options.append (0);
		until (len (sell_bag_options) == 9);
	endif

	job_options := acct.GetProp ("job_options");
	if (!job_options)
		SendSysMessage (character, "Can't find jobbing options - resetting to default");
		job_options := {0, 0};
	endif
	
	bard_options := GetObjProperty (character, "sound_options");
	if (!bard_options)
		SendSysMessage (character, "Can't find barding options - resetting to default");
		bard_options := {0};
	endif

	autoheal_options := GetObjProperty (character, "autoheal_options");
	if (!autoheal_options or len (autoheal_options) < 7)
		autoheal_options := {3, 3, 3, 3, 3, 3, 1};
	endif
	
	crafting_options := GetObjProperty (character, "crafting_options");
	if (!crafting_options or len (crafting_options) < 3)
		crafting_options := {1, 0, 0};
	endif

	logoffcloneoptions := GetObjProperty (character, "logoff_clone_options");
	if (!logoffcloneoptions or len (logoffcloneoptions) < 11)
		logoffcloneoptions := {0, "", "", "", "", "", "", "", "", "", ""};
	endif

	var return_value;
	var done := 0;
	repeat
		case (current_page)
			1:
				return_value := DisplayAccountOptions (character);
			2:
				return_value := DisplaySellBagOptions (character);
			3:
				return_value := DisplayJobOptions (character);
			4:
				return_value := SetAutohealHealthOptions (character);
			5:
				return_value := SetAutocureHealthOptions (character);
			6:
				return_value := DisplayCraftingOptions (character);
			7:
				return_value := DisplayLogOutMessageOptions (character);
				var valid_message := 0;
				for i := 2 to 11
					if (!logoffcloneoptions[i] or logoffcloneoptions[i] == "-None-")
						logoffcloneoptions[i] := "";
					else
						valid_message := 1;
					endif
				endfor
				if (!valid_message)
					logoffcloneoptions[1] := 0;
				endif
			8:
				return_value := DisplayGumpOptions (character);
			default:
				SendSysMessage (character, "Error with gump page " + current_page);
		endcase

		if (!return_value)
			SendSysMessage (character, "No changes made.");
			EraseObjProperty (character, "#options_window");
			return;
		elseif (return_value == BUTTON_NEXT_PAGE)
			current_page := current_page + 1;
			if (current_page > FINAL_PAGE)
				current_page := 1;
			endif
		elseif (return_value == BUTTON_LAST_PAGE)
			current_page := current_page - 1;
			if (current_page <= 0)
				current_page := FINAL_PAGE;
			endif
		elseif (return_value == BUTTON_OK)
			acct.SetProp ("sell_options", sell_bag_options);
			acct.SetProp ("job_options", job_options);
			SetObjProperty (character, "autoheal_options", autoheal_options);
			SetObjProperty (character, "#ChangedOptions", 1);
			SetObjProperty (character, "logoff_clone_options", logoffcloneoptions);
			SetObjProperty (character, "crafting_options", crafting_options);
			SetObjProperty (character, "sound_options", bard_options);
			SendSysMessage (character, "Options saved!");
			SendSysMessage (character, "You may need to log out for changes to autoheal to take effect.");
			SetAccountProperty (character.acctname, "account_email", account_email);
			EraseObjProperty (character, "#options_window");
			return;
		endif
	until (done);
	EraseObjProperty (character, "#options_window");
	return;
endprogram




///////////////////
//  Displays account options options
///////////////////

function DisplayAccountOptions (character)
	var gump_layout := array {
		"nodispose",
		"page 0",
		"resizepic 20 20 5170 300 450",
		"button 240 420 2128 2129 1 0 " + BUTTON_OK,
		"button 50 420 2031 2032 1 0 " + BUTTON_HELP,
		"button 280 55 5601 5605 1 0 " + BUTTON_NEXT_PAGE,
		"button 40 55 5603 5607 1 0 " + BUTTON_LAST_PAGE,
		
		"text 100 55 0 0",					//Main page name
		"button 58 89 2104 2103 1 0 1", 		//Change Password button
		"text 75 85 0 1",					//Change password
		
		"text 65 120 0 2",					//Email Address
		"button 75 145 2104 2103 1 0 2",		//change address button
		"croppedtext 95 140 200 20 0 3"		//current email address
	};
	var gump_data :=array {
		"Account Options",					//0
		"Change Password",					//1
		"Email Address",					//2
		account_email,
		"change"
	};

	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		return 0;
	endif
	
	if (gump_return[1])
		var acct := character.acct;
		var newpassword := SendTextEntryGump (character, "Please enter your new password",
						TE_CANCEL_ENABLE, TE_STYLE_NORMAL, 16, "16 characters max");
		if (!newpassword)
			sendsysmessage (character, "Canceled.");
			return BUTTON_CURRENT_PAGE;
		endif
	
		var passcheck := SendTextEntryGump (character, "Please re-enter your new password",
						TE_CANCEL_ENABLE, TE_STYLE_NORMAL, 16, "16 characters max");
		if (!passcheck)
			sendsysmessage (character, "Canceled.");
			return BUTTON_CURRENT_PAGE;
		endif

		if ( newpassword == passcheck )
			SendSysMessage ( character, "Password Changed!", FONT_BOLD, MESSAGE_COLOR_GOOD);
			acct.setpassword (newpassword);
			SendSysMessage ( character, "Don't forget it!", FONT_BOLD, MESSAGE_COLOR_GOOD);
		else
			SendSysMessage (character, "Passwords Don't Match!", FONT_BOLD, MESSAGE_COLOR_BAD);
			sendsysmessage (character, "Canceled");
		endif
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[2])
		var new_account_email := SendTextEntryGump (character, "Please enter your new email address",
						TE_CANCEL_ENABLE, TE_STYLE_NORMAL, 40, "");
		if (!new_account_email)
			SendSysMessage (character, "Canceled.");
			return BUTTON_CURRENT_PAGE;
		endif

		if (!new_account_email["@"])
			SendSysMessage (character, "That doesn't look like an email address to me");
			return BUTTON_CURRENT_PAGE;
		endif
		account_email := new_account_email;
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "ACCOUNT OPTIONS:  ";
		themessage := themessage + "Allows you change your account password and the email address associated ";
		themessage := themessage + "with your account.";
		
		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	else
		return BUTTON_CURRENT_PAGE;
	endif
endfunction




///////////////////
//  Displays the 'sell bag' options
///////////////////

function DisplaySellBagOptions (character)
	var gump_layout := array {
		"nodispose",
		"page 0",
		"resizepic 20 20 5170 300 450",
		"button 240 420 2128 2129 1 0 " + BUTTON_OK,
		"button 50 420 2031 2032 1 0 " + BUTTON_HELP,
		"button 280 55 5601 5605 1 0 " + BUTTON_NEXT_PAGE,
		"button 40 55 5603 5607 1 0 " + BUTTON_LAST_PAGE,
		
		"text 100 55 0 0",				//Main page name
		"checkbox 55 85 2510 2511 " + sell_bag_options[1] + " 1",
		"text 75 85 0 1",
		"checkbox 55 110 2510 2511 " + sell_bag_options[2] + " 2",
		"text 75 110 0 2",
		"checkbox 55 135 2510 2511 " + sell_bag_options[3] + " 3",
		"text 75 135 0 3",
		"checkbox 55 160 2510 2511 " + sell_bag_options[4] + " 4",
		"text 75 160 0 4",
		"checkbox 55 185 2510 2511 " + sell_bag_options[5] + " 5",
		"text 75 185 0 5",
		"checkbox 55 210 2510 2511 " + sell_bag_options[6] + " 6",
		"text 75 210 0 6",
		"checkbox 55 235 2510 2511 " + sell_bag_options[7] + " 7",
		"text 75 235 0 7",
		"checkbox 55 260 2510 2511 " + sell_bag_options[8] + " 8",
		"text 75 260 0 8",
		"checkbox 55 285 2510 2511 " + sell_bag_options[9] + " 9",
		"text 75 285 0 9"
	};
	var gump_data := array {
		"'Sell bag' Options",			//0
		"Sell gems",					//1
		"Sell reagents",				//2
		"Sell potions",				//3
		"Sell hides",					//4
		"Sell raw food",				//5
		"Sell blank wands",				//6
		"Sell empty bags",				//7
		"Sell shovels",				//8
		"Sell scrolls"					//9
	};


	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		return 0;
	endif

	sell_bag_options := {0, 0, 0, 0, 0, 0, 0, 0, 0};
	for i := 1 to 9
		if (gump_return[i])
			sell_bag_options[i] := 1;
		endif
	endfor

	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "SELL BAG OPTIONS:  ";
		themessage := themessage + "Allows you to select whether or not a merchant will purchase items in ";
		themessage := themessage + "a given category when you perform a 'sell bag'.  Categories with a ";
		themessage := themessage + "selected box will be sold, unselected items will not.";
		
		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif
endfunction




///////////////////
//  Displays the jobbing options
///////////////////

function DisplayJobOptions (character)
	var gump_layout := array {
		"nodispose",
		"page 0",
		"resizepic 20 20 5170 300 450",
		"button 240 420 2128 2129 1 0 " + BUTTON_OK,
		"button 50 420 2031 2032 1 0 " + BUTTON_HELP,
		"button 280 55 5601 5605 1 0 " + BUTTON_NEXT_PAGE,
		"button 40 55 5603 5607 1 0 " + BUTTON_LAST_PAGE,
		"text 100 55 0 1",
		"checkbox 55 85 2510 2511 " + job_options[1] + " 1",
		"text 75 85 0 2",
		"checkbox 55 110 2510 2511 " + job_options[2] + " 2",
		"text 75 110 0 3",
		"text 100 200 0 10",
		"checkbox 55 220 2510 2511 " + bard_options[1] + " 3",
		"text 75 220 0 11"
	};

	var gump_data := array {
		"filler",
		"Jobbing Options",			//1
		"Auto-accept job offers",	//2
		"Count items made",			//3
		"filler",					//4
		"filler",					//5
		"filler",					//6
		"filler",					//7
		"filler",					//8
		"filler",					//9
		"Barding Options",			//10
		"Suppress Bard Song"		//11
	};

	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		SendSysMessage (character, "You must close other gumps before you can use this.");
		return 0;
	endif
	if (gump_return[0] == 1)
		return 0;
	endif
	
	job_options := {0, 0};
	if (gump_return[1])
		job_options[1] := 1;
	endif
	if (gump_return[2])
		job_options[2] := 1;
	endif
	
	bard_options := {0};
	if (gump_return[3])
		bard_options[1] := 1;
	endif

	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "JOBBING OPTIONS:  ";
		themessage := themessage + "If 'auto-accept job offers' is turned on, jobs will automatically be accepted ";
		themessage := themessage + "when you request one from a merchant.  If 'count items made' is turned on, ";
		themessage := themessage + "items created while performing a job will be counted      ";
		themessage := themessage + "<br>BARD OPTIONS:  Suppresses sound from bard song";

		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif
endfunction




///////////////////
//  Displays autoheal options
///////////////////

function SetAutohealHealthOptions (character)
	var gump_layout := array {
		"nodispose",
		"page 0",
		"resizepic 20 20 5170 300 450",
		"button 240 420 2128 2129 1 0 " + BUTTON_OK,
		"button 50 420 2031 2032 1 0 " + BUTTON_HELP,
		"button 280 55 5601 5605 1 0 " + BUTTON_NEXT_PAGE,
		"button 40 55 5603 5607 1 0 " + BUTTON_LAST_PAGE,
		"text 100 55 0 1"
	};

	var gump_data := array{
		"filler",						//0
		"Autoheal Options",				//1
		"Cast Greater Heal Spell at:",	//2
		"Drink Greater Heal Potion at:",	//3
		"Use Bandage at:",				//4
		"Don't",						//5
		"At 25% health",				//6
		"At 50% health",				//7
		"At 75% health",				//8
		"Whenever damaged"				//8
	};

	var chosen_option := array{0, 0, 0, 0};
	chosen_option[autoheal_options[1]] := 1;

	gump_layout.append ("text 50 75 0 2");
	gump_layout.append ("group 0");
	gump_layout.append ("radio 55 95 2510 2511 " + chosen_option[1] + " 1");
	gump_layout.append ("text 75 95 0 5");
	gump_layout.append ("radio 55 115 2510 2511 " + chosen_option[2] + " 2");
	gump_layout.append ("text 75 115 0 6");
	gump_layout.append ("radio 55 135 2510 2511 " + chosen_option[3] + " 3");
	gump_layout.append ("text 75 135 0 7");
	gump_layout.append ("radio 55 155 2510 2511 " + chosen_option[4] + " 4");
	gump_layout.append ("text 75 155 0 8");

	chosen_option := array{0, 0, 0, 0};
	chosen_option[autoheal_options[2]] := 1;
	gump_layout.append ("text 50 185 0 3");
	gump_layout.append ("group 1");
	gump_layout.append ("radio 55 205 2510 2511 " + chosen_option[1] + " 5");
	gump_layout.append ("text 75 205 0 5");
	gump_layout.append ("radio 55 225 2510 2511 " + chosen_option[2] + " 6");
	gump_layout.append ("text 75 225 0 6");
	gump_layout.append ("radio 55 245 2510 2511 " + chosen_option[3] + " 7");
	gump_layout.append ("text 75 245 0 7");
	gump_layout.append ("radio 55 265 2510 2511 " + chosen_option[4] + " 8");
	gump_layout.append ("text 75 265 0 8");

	chosen_option := array{0, 0, 0, 0};
	chosen_option[autoheal_options[3]] := 1;
	gump_layout.append ("text 50 295 0 4");
	gump_layout.append ("group 2");
	gump_layout.append ("radio 55 315 2510 2511 " + chosen_option[1] + " 9");
	gump_layout.append ("text 75 315 0 5");
	gump_layout.append ("radio 55 335 2510 2511 " + chosen_option[2] + " 10");
	gump_layout.append ("text 75 335 0 7");
	gump_layout.append ("radio 55 355 2510 2511 " + chosen_option[3] + " 11");
	gump_layout.append ("text 75 355 0 8");
	gump_layout.append ("radio 55 375 2510 2511 " + chosen_option[4] + " 12");
	gump_layout.append ("text 75 375 0 9");

	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		SendSysMessage (character, "You must close other gumps before you can use this.");
		return 0;
	endif
	if (gump_return[0] == 1)
		return 0;
	endif
	
	if (gump_return[1])
		autoheal_options[1] := 1;
	elseif (gump_return[2])
		autoheal_options[1] := 2;
	elseif (gump_return[3])
		autoheal_options[1] := 3;
	else
		autoheal_options[1] := 4;
	endif

	if (gump_return[5])
		autoheal_options[2] := 1;
	elseif (gump_return[6])
		autoheal_options[2] := 2;
	elseif (gump_return[7])
		autoheal_options[2] := 3;
	else
		autoheal_options[2] := 4;
	endif

	if (gump_return[9])
		autoheal_options[3] := 1;
	elseif (gump_return[10])
		autoheal_options[3] := 2;
	elseif (gump_return[11])
		autoheal_options[3] := 3;
	else
		autoheal_options[3] := 4;
	endif
	
	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "AUTOHEAL OPTIONS:  ";
		themessage := themessage + "Allows you to decide when and if potions, bandages and spells should ";
		themessage := themessage + "automatically be used to try to heal you when you are hurt.";

		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif
endfunction




///////////////////
//  Displays autoheal options
///////////////////

function SetAutocureHealthOptions (character)
	var gump_layout := blank_gump_layout;
	var gump_data := array{
		"filler",						//0
		"Autocure Options",				//1
		"Cast Cure Spell at:",			//2
		"Drink Greater Cure Potion at:",	//3
		"Use Bandage at:",				//4
		"Don't",						//5
		"Poisoned and at < 50% health",	//6
		"Anytime I'm poisoned"			//7
	};

	var chosen_option := array{0, 0, 0, 0};
	chosen_option[autoheal_options[4]] := 1;
	gump_layout.append ("text 100 55 0 1");
	gump_layout.append ("text 50 75 0 2");
	gump_layout.append ("group 0");
	gump_layout.append ("radio 55 95 2510 2511 " + chosen_option[1] + " 1");
	gump_layout.append ("text 75 95 0 5");
	gump_layout.append ("radio 55 115 2510 2511 " + chosen_option[2] + " 2");
	gump_layout.append ("text 75 115 0 6");
	gump_layout.append ("radio 55 135 2510 2511 " + chosen_option[3] + " 3");
	gump_layout.append ("text 75 135 0 7");

	chosen_option := array{0, 0, 0, 0};
	chosen_option[autoheal_options[5]] := 1;
	gump_layout.append ("text 50 185 0 3");
	gump_layout.append ("group 1");
	gump_layout.append ("radio 55 205 2510 2511 " + chosen_option[1] + " 5");
	gump_layout.append ("text 75 205 0 5");
	gump_layout.append ("radio 55 225 2510 2511 " + chosen_option[2] + " 6");
	gump_layout.append ("text 75 225 0 6");
	gump_layout.append ("radio 55 245 2510 2511 " + chosen_option[3] + " 7");
	gump_layout.append ("text 75 245 0 7");

	chosen_option := array{0, 0, 0, 0};
	chosen_option := array{0, 0, 0, 0};
	chosen_option[autoheal_options[6]] := 1;
	gump_layout.append ("text 50 295 0 4");
	gump_layout.append ("group 2");
	gump_layout.append ("radio 55 315 2510 2511 " + chosen_option[1] + " 9");
	gump_layout.append ("text 75 315 0 5");
	gump_layout.append ("radio 55 335 2510 2511 " + chosen_option[2] + " 10");
	gump_layout.append ("text 75 335 0 6");
	gump_layout.append ("radio 55 355 2510 2511 " + chosen_option[3] + " 11");
	gump_layout.append ("text 75 355 0 7");

	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		SendSysMessage (character, "You must close other gumps before you can use this.");
		return 0;
	endif
	if (gump_return[0] == 1)
		return 0;
	endif
	
	if (gump_return[1])
		autoheal_options[4] := 1;
	elseif (gump_return[2])
		autoheal_options[4] := 2;
	else
		autoheal_options[4] := 3;
	endif

	if (gump_return[5])
		autoheal_options[5] := 1;
	elseif (gump_return[6])
		autoheal_options[5] := 2;
	else
		autoheal_options[5] := 3;
	endif

	if (gump_return[9])
		autoheal_options[6] := 1;
	elseif (gump_return[10])
		autoheal_options[6] := 2;
	else
		autoheal_options[6] := 3;
	endif
	
	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "AUTOHEAL OPTIONS:  ";
		themessage := themessage + "Allows you to decide when and if potions, bandages and spells should ";
		themessage := themessage + "automatically be used to try to cure you when you are poisoned.";

		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif
endfunction




///////////////////
//  Displays the 'sell bag' options
///////////////////

function DisplayLogOutMessageOptions (character)
	for i := 2 to 11
		if (!logoffcloneoptions[i])
			logoffcloneoptions[i] := "-None-";
		endif
	endfor

	var gump_layout := array {
		"nodispose",
		"page 0",
		"resizepic 20 20 5170 300 450",
		"button 240 420 2128 2129 1 0 " + BUTTON_OK,
		"button 50 420 2031 2032 1 0 " + BUTTON_HELP,
		"button 280 55 5601 5605 1 0 " + BUTTON_NEXT_PAGE,
		"button 40 55 5603 5607 1 0 " + BUTTON_LAST_PAGE,

		"text 100 55 0 0",
		"checkbox 55 85 2510 2511 " + logoffcloneoptions[1] + " 1",
		"text 75 85 0 1",

		"button 55 115 2104 2103 1 0 2",
		"croppedtext 75 110 200 20 0 2",
		"button 55 140 2104 2103 1 0 3",
		"croppedtext 75 135 200 20 0 3",
		"button 55 165 2104 2103 1 0 4",
		"croppedtext 75 160 200 20 0 4",
		"button 55 190 2104 2103 1 0 5",
		"croppedtext 75 185 200 20 0 5",
		"button 55 215 2104 2103 1 0 6",
		"croppedtext 75 210 200 20 0 6",
		"button 55 240 2104 2103 1 0 7",
		"croppedtext 75 235 200 20 0 7",
		"button 55 265 2104 2103 1 0 8",
		"croppedtext 75 260 200 20 0 8",
		"button 55 290 2104 2103 1 0 9",
		"croppedtext 75 285 200 20 0 9",
		"button 55 315 2104 2103 1 0 10",
		"croppedtext 75 310 200 20 0 10",
		"button 55 340 2104 2103 1 0 11",
		"croppedtext 75 335 200 20 0 11"
	};

	var gump_data := array{
		"Logout Options",			//0
		"Leave NPC clone",			//1
		logoffcloneoptions[2],		//2
		logoffcloneoptions[3],		//3
		logoffcloneoptions[4],		//4
		logoffcloneoptions[5],		//5
		logoffcloneoptions[6],		//6
		logoffcloneoptions[7],		//7
		logoffcloneoptions[8],		//8
		logoffcloneoptions[9],		//9
		logoffcloneoptions[10],		//10
		logoffcloneoptions[11]		//11
	};



	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		return 0;
	endif

	if (gump_return[1])
		logoffcloneoptions[1] := 1;
	else
		logoffcloneoptions[1] := 0;
	endif

	for i := 2 to 11
		if (gump_return[i])
			var text := SendTextEntryGump (character, "Enter a message:",
					TE_CANCEL_ENABLE, TE_STYLE_NORMAL, 80);
			if (!text)
				logoffcloneoptions[i] := "";
			else
				logoffcloneoptions[i] := text;
			endif
			return BUTTON_CURRENT_PAGE;
		endif
	endfor

	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "LOGOUT OPTIONS:  ";
		themessage := themessage + "Allows you to decide if you want to leave an NPC clone behind ";
		themessage := themessage + "when you log out.  You must also set at least one message that ";
		themessage := themessage + "the NPC will say to leave a clone.  If you set multiple messages, ";
		themessage := themessage + "the NPC clone will randomly select one to say.";
		
		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif
endfunction




///////////////////
//  Displays options related to crafting
///////////////////

function DisplaycraftingOptions (character)
	var gump_layout := blank_gump_layout;
	var gump_data := array{
		"filler",
		"Crafting Options",			//1
		"Autoloop scrolls",			//2
		"Suppress Inscription msgs.",	//3
		"Automatic quick-scribe",	//4
		"Set Crafting Bag"
	};

	gump_layout.append ("text 100 55 0 1");
	gump_layout.append ("checkbox 55 85 2510 2511 " + crafting_options[1] + " 1");
	gump_layout.append ("text 75 85 0 2");
	gump_layout.append ("checkbox 55 115 2510 2511 " + crafting_options[2] + " 2");
	gump_layout.append ("text 75 115 0 3");
	gump_layout.append ("checkbox 55 145 2510 2511 " + crafting_options[3] + " 3");
	gump_layout.append ("text 75 145 0 4");
	gump_layout.append ("button 55 370 2104 2103 1 0 11");
	gump_layout.append ("text 75 365 0 5");

	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		SendSysMessage (character, "You must close other gumps before you can use this.");
		return 0;
	endif
	if (gump_return[0] == 1)
		return 0;
	endif
	
	crafting_options := {0, 0, 0};
	if (gump_return[1])
		crafting_options[1] := 1;
	endif
	if (gump_return[2])
		crafting_options[2] := 1;
	endif
	if (gump_return[3])
		crafting_options[3] := 1;
	endif
	
	//Set the crafting bag
	if (gump_return[11])
		SendSysMessage (character, "Select a container");
		var bag := Target (character);
		if (!bag)
			SendSysMessage (character, "Canceled.");
			return BUTTON_CURRENT_PAGE;
			return;
		endif
	
		if (!bag.isa (POLCLASS_CONTAINER) )
			SendSysMessage (character, "That's not a container!");
			return BUTTON_CURRENT_PAGE;
			return;
		endif

		if (!InInventory (character.backpack, bag) )
			SendSysMessage (character, "That is not in your inventory.");
			return BUTTON_CURRENT_PAGE;
			return;
		endif

		SetObjProperty (character, "craftingbagserial", bag.serial);
		SendSysMessage (character, "You will now craft and harvest into this bag.");	
		return BUTTON_CURRENT_PAGE;
	endif
	
	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "CRAFTING OPTIONS:  ";
		themessage := themessage + "Sets assorted options related to crafting.  If you set a crafting ";
		themessage := themessage + "bag, items you create will be placed in the selected bag instead of ";
		themessage := themessage + "your root backpack.";

		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif
endfunction




///////////////////
//  Options related to gumps
///////////////////

function DisplayGumpOptions (character)
	var gump_layout := blank_gump_layout;
	var gump_data := array{
		"filler",
		"Gump Options",			//1
		"Reset Codex gump",			//2
		"Reset Druidbag gump",		//3
		"Set default .msg position"
	};

	gump_layout.append ("text 100 55 0 1");
	gump_layout.append ("button 55 85 2104 2103 1 0 11");
	gump_layout.append ("text 75 80 0 2");
	gump_layout.append ("button 55 110 2104 2103 1 0 12");
	gump_layout.append ("text 75 105 0 3");
	gump_layout.append ("button 55 135 2104 2103 1 0 13");
	gump_layout.append ("text 75 130 0 4");

	var gump_return := SendDialogGump (character, gump_layout, gump_data);
	if (!gump_return[0])
		SendSysMessage (character, "You must close other gumps before you can use this.");
		return 0;
	endif
	if (gump_return[0] == 1)
		return 0;
	endif

	//Set the crafting bag
	if (gump_return[11])
		EraseObjProperty (character, "codex_position");
		SendSysMessage (character, "Codex gump location reset");

		//Check through each codex in the player's backpack and close the gump for it
		foreach item in EnumerateItemsInContainer (character.backpack)
			if (item.objtype == UOBJ_CODEX_DAMNORUM)
				if (GetObjProperty (item, "#necrobookopen"))
					CloseGump (character, GetObjProperty (item, "#necrobookopen"));
				endif
			endif
		endforeach

		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[12])
		EraseObjProperty (character, "druidbag_position");
		EraseObjProperty (character, "#druidbag_version");
		SendSysMessage (character, "Druid bag gump location reset");

		//Check through each druidbag in the player's backpack and close the gump for it
		foreach item in EnumerateItemsInContainer (character.backpack)
			if (item.objtype == UOBJ_DRUIDBAG)
				if (GetObjProperty (item, "#druidbagopen"))
					CloseGump (character, GetObjProperty (item, "#druidbagopen"));
				endif
			endif
		endforeach

		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[13])
		var xpos := 100;
		var ypos := 100;
		var big_move_mode := 1;
		var done := 0;
		
		repeat
			var msg_gump_layout := array {
				"nodispose",
				"page 0",
				"resizepic " + xpos + " " + ypos + " 5054 600 160",
				"text " + (xpos+20) + " " + (ypos+10) + " 0 0",
				"text " + (xpos+20) + " " + (ypos+30) + " 0 1",
				"button " + (xpos+80) + " " + (ypos+105) + " 5600 5604 1 0 2",	//Up
				"button " + (xpos+80) + " " + (ypos+135) + " 5602 5606 1 0 3",	//Down
				"button " + (xpos+100) + " " + (ypos+120) + " 5601 5605 1 0 4",	//right
				"button " + (xpos+60) + " " + (ypos+120) + " 5603 5607 1 0 5",	//left
		
				"button " + (xpos+380) + " " + (ypos+120) + " 243 241 1 0 0",	//Cancel
				"button " + (xpos+460) + " " + (ypos+120) + " 249 247 1 0 1"	//Ok
			};
			var msg_gump_data := array {
				"Use the arrows to position the gump where you want it, then",
				"press OK"
			};
			if (big_move_mode)
				msg_gump_layout.append ("button " + (xpos+81) + " " + (ypos+121) + " 1210 1210 1 0 6");
			else
				msg_gump_layout.append ("button " + (xpos+81) + " " + (ypos+121) + " 1209 1209 1 0 6");
			endif
			
			var msg_gump_return := SendDialogGump (character, msg_gump_layout, msg_gump_data);
			if (msg_gump_return [1])
				done := 1;
			elseif (msg_gump_return [2])
				if (big_move_mode)
					ypos := ypos - 100;
				else
					ypos := ypos - 25;
				endif
				if (ypos < 0)
					ypos := 0;
				endif
			elseif (msg_gump_return [3])
				if (big_move_mode)
					ypos := ypos + 100;
				else
					ypos := ypos + 25;
				endif
			elseif (msg_gump_return [4])
				if (msg_gump_return)
					xpos := xpos + 150;
				else
					xpos := xpos + 25;
				endif
			elseif (msg_gump_return [5])
				if (big_move_mode)
					xpos := xpos - 100;
				else
					xpos := xpos - 25;
				endif
				if (xpos < 0)
					xpos := 0;
				endif
			elseif (msg_gump_return [6])
				if (big_move_mode)
					big_move_mode := 0;
				else
					big_move_mode := 1;
				endif
			else
				SendSysMessage (character, "Canceled.");
				return BUTTON_CURRENT_PAGE;
			endif
		until (done);
		SetObjProperty (character, "dotmsg_gump_position", Array {xpos, ypos});
		

		return BUTTON_CURRENT_PAGE;
	endif
	
	if (gump_return[BUTTON_HELP])
		//Send the help gump and rerun this function
		var themessage := "GUMP OPTIONS:  ";
		themessage := themessage + "Sets assorted options related to gumps.  The current options are ";
		themessage := themessage + "to reset the position of gumps for either Codex Damnorums or druid bags.";

		SendStringAsHtmlWindow (character, themessage, "Help");
		return BUTTON_CURRENT_PAGE;
	elseif (gump_return[BUTTON_OK])
		return BUTTON_OK;
	elseif (gump_return[BUTTON_NEXT_PAGE])
		return BUTTON_NEXT_PAGE;
	elseif (gump_return[BUTTON_LAST_PAGE])
		return BUTTON_LAST_PAGE;
	endif

endfunction
