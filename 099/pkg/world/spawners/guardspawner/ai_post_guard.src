///////////////////
//  This is the script for generic NPC guards.  They attack hostile NPCs and criminal players.
///////////////////

use os;
use uo;
use npc;
use util;
use cfgfile;
use datafile;

include "include/client";
include "include/eventid";
include "include/gumps";
include "include/locations";
include ":contextMenus:contextMenus";

include "../pkg/npcs/main_ai/combat/fightmode_normal_default";
include "../pkg/npcs/main_ai/combat/closedistance_default";
include "../pkg/npcs/main_ai/combat/changeopponent_default";
include "../pkg/npcs/main_ai/main/sleepmode_townfolk";
include "../pkg/npcs/main_ai/setup/setup";

include "../pkg/npcs/speech";
include "../pkg/npcs/npcinfo";
include "../pkg/npcs/npc_util";
include "../pkg/character/virtue/virtue";

const UACTION_LOOK_AROUND	:= 0x05;
const UACTION_SALUTE		:= 0x21;
const HALT_THRESHOLD		:= 10;	//How large of an area he guards

var myhome, myfacing, stepcounter := 0;
var next_wander := ReadGameClock() + 0;

program guard_ai ()
	DoGuardStartupSetup ();
	if (!me.backpack)
		DoOnCreationSetup ();
		sleep (1);
		foreach item in ListEquippedItems (me)
			item.newbie := 1;
		endforeach
	endif
	drop_anchor ();
	
	if (GetObjProperty (me, "frozen"))
		me.frozen := 1;
	endif

	EnableMainEvents ();
	SetWarMode (0);

	//make sure that we have a dffile elem
	if (!LoadDataFileEntry ())
		KillMe();
	endif

	var ev;
	while (me)
		ev := wait_for_event (1);
		GoToMyHomeLocation ();
		if (ev)
			ProcessEvent (ev);
		endif
	endwhile
endprogram




///////////////////
// Loads the data file entry
///////////////////

function LoadDataFileEntry ()
	var dfkey := GetObjProperty (me, "guardspawner");
	if (!dfkey)
		//may have just spawned...
		var counter := 10;
		repeat
			sleep (1);
			dfkey := GetObjProperty (me, "guardspawner");
		until (dfkey or counter > 10);
		if (!dfkey)
			return 0;
		endif
	endif
	
	UnloadDataFile (":guardspawner:guardspawn");
	var guardspawn_df := OpenDataFile (":guardspawner:guardspawn");
	if (!guardspawn_df)
		return 0;
	endif
	var theelem := guardspawn_df.FindElement(dfkey);
	if (!theelem)
		return 0;
	endif
	
	myhome := theelem.GetProp ("spawnloc");
	myfacing := theelem.GetProp ("spawnfacing");
	if (!myhome)
		return 0;
	endif
	
	return 1;
endfunction




///////////////////
//  Follow the path
///////////////////

function GoToMyHomeLocation ()
	if (me.x == myhome[1])
		if (me.y == myhome[2])
			if (me.z == myhome[3])
				if (me.facing != myfacing)
					me.facing := myfacing;
				endif
				stepcounter := 0;
				return;
			endif
		endif
	endif
	
	if (stepcounter > 20)
		var rlm := myhome[4];
		if (!rlm)
			rlm := _DEFAULT_REALM;
		endif
		MoveObjectToLocation( me, myhome[1], myhome[2], myhome[3], rlm, flags := MOVEOBJECT_NORMAL );
		drop_anchor ();
		return;
	endif

	WalkTowardLocation (myhome[1], myhome[2]);
	stepcounter := stepcounter + 1;
	drop_anchor ();
endfunction



///////////////////
//  processes events (duh)
///////////////////

function ProcessEvent (byref ev)
	case (ev.type)
		EVID_CONTEXT_MENU:
			case (ev.result)
				eCMR_Quest:
					var parms := array{ };
					parms[1] := me;
					parms[2] := ev.source;
					start_script (":guards:townguard_quest", parms);
				eCMR_SummonPet:
					var parms := array{ };
					parms[1] := me;
					parms[2] := ev.source;
					start_script (":guards:townguard_status", parms);
				eCMR_Join:
					JoinGuards (ev.source);
				eCMR_Resign:
					QuitGuards (ev.source);
			endcase
		EVID_SPEECH:
			var evtext := lower(ev.text);
			if (evtext["guards"])
				TurnToward (ev.source);
				next_wander := readgameclock()+30;
				look_around();
				return;
			endif
			if (distance (me, ev.source) > 1)
				return;
			endif

			TurnToward (ev.source);
			next_wander := readgameclock()+30;
			
			if ( evtext ["join"] )
				JoinGuards (ev.source);
			elseif (evtext ["resign"])
				QuitGuards (ev.source);
			elseif (evtext ["quest"])
				var parms := array { };
				parms[1] := me;
				parms[2] := ev.source;
				start_script (":guards:townguard_quest", parms);
			elseif (evtext ["status"])
				var parms := array { };
				parms[1] := me;
				parms[2] := ev.source;
				start_script (":guards:townguard_status", parms);
				
			else
				check_speech (ev.text, ev.source);
			endif

		EVID_ENGAGED:
		EVID_DAMAGED:
			next_wander := readgameclock()+30;
			if ( (ev.source) and (!ev.source.dead) )
				say ("Die " + ev.source.name + "!" );
				AddToHateList( ev.source );
				Fight( ev.source );
			endif

		EVID_ENTEREDAREA:
			PerformAction (me, UACTION_LOOK_AROUND);
			look_around ();

		EVID_ITEM_GIVEN:
			next_wander := ReadGameClock() + 30;
			if (GetObjProperty (ev.item, "deliverto") and GetObjProperty (ev.item, "deliverto") == me.serial)
				PayForItemDelivery (ev);
			else
				TakeItem (ev.source, ev.item);
			endif

		EVID_ALL_FOLLOW_CMD:
			SetObjProperty (me, "destinationx", ev.x);
			SetObjProperty (me, "destinationy", ev.y);
			SetObjProperty (me, "destinationsteps", 0);
			drop_anchor ();
			RunTowardLocation (ev.x, ev.y);

	endcase
endfunction




///////////////////
//  looks around for evil creatures and criminals
///////////////////

function look_around()
	PerformAction (me, UACTION_LOOK_AROUND);
	foreach mobile in ListMobilesNearLocation (me.x, me.y, me.z, 15, me.realm)
		var elem := GetNpcTemplateElem (mobile.npctemplate);
		if (elem and elem.hostile and !elem.guardignore)
			if (!mobile.script["tamed"])
				if (mobile.name)
					Say ("Ah ha! " + mobile.name);
					Fight (mobile);
					return;
				endif
			endif
		else
			CheckForCriminals (mobile);
		endif
	endforeach
endfunction




///////////////////
//  checks to see if the given mobile is a criminal
///////////////////

function CheckForCriminals (byref jerk)
	if (jerk.dead)
		return;
	endif

	if (jerk.criminal)
		say ("Stop Criminal!");
		AddToHateList (jerk);
		Fight (jerk);
	elseif (CheckHateList (jerk))
		say ("You're not welcome in this town, "+ jerk.name );
		Fight (jerk);
	endif
endfunction




///////////////////
//  add a new criminal to the guards list
///////////////////

function AddToHateList (byref crim)
	if (crim.npctemplate)
		return;
	endif

	var crooks := array { };
	if (!GetObjProperty (me, "crooks") )
		crooks[1] := crim.serial;
		SetObjProperty (me, "crooks", crooks);
		return;
	else
		crooks := GetObjProperty (me, "crooks");
	endif
	
	if (crim.serial in crooks)
		return;	//he's already in the list
	endif

	if (len(crooks)>3)
		crooks[ RandomInt(3)+1 ] := crim.serial;
	else
		crooks.append (crim.serial);
	endif

	SetObjProperty (me, "crooks", crooks);
endfunction




///////////////////
//  check to see if the person is in the list of criminals
///////////////////

function CheckHateList (byref you)
	if (you.npctemplate)
		return;
	endif
	
	if (!GetObjProperty (me, "crooks"))
		return 0;
	endif
	
	//Guards remember people who have commited crimes, but sometimes forgive them if they
	//have a high virtue
	var crooks := GetObjProperty (me, "crooks");
	if (you.serial in crooks)
		var yourvirtue := GetObjProperty (you, "virtue");
		if (yourvirtue and yourvirtue > 200)
			//Spam limiter
			if (GetObjProperty (me, "#nextgreet"))
				if (GetObjProperty (me, "#nextgreet") > ReadGameClock())
					return 0;
				endif
			endif
			SetObjProperty (me, "#nextgreet", ReadGameClock() + 30);

			Say ("I'm keeping my eye on you, " + you.name);
			return 0;
		endif
		return 1;
	endif
	
	return 0;
endfunction

function EnableMainEvents()
	DisableEvents (SYSEVENT_LEFTAREA + SYSEVENT_DISENGAGED + SYSEVENT_OPPONENT_MOVED );
	EnableEvents (SYSEVENT_ENGAGED + SYSEVENT_DAMAGED, 20);
	EnableEvents (SYSEVENT_ENTEREDAREA, HALT_THRESHOLD);
	EnableEvents (SYSEVENT_SPEECH + SYSEVENT_ITEM_GIVEN, 3);
endfunction

function DisableMainEvents()
	DisableEvents (SYSEVENT_ENGAGED + SYSEVENT_DAMAGED + SYSEVENT_ENTEREDAREA);
	DisableEvents (SYSEVENT_SPEECH + SYSEVENT_ITEM_GIVEN);
endfunction

function JoinGuards(byref who)
	var mytype := GetObjProperty (me, "guardtype");
	if (!mytype)
		say("Just grab a sword and start thrashing criminals, friend.");
		return;
	endif

	var myshieldtype := 0x1bc4; //order
	var otherguards := "Chaos";
	if (mytype == 2)
		myshieldtype := 0x1bc3;//chaos
		otherguards := "Order";
	endif //chaos

	TurnToward(who);

	var yourtype := GetObjProperty(who,"guardtype");
	if (yourtype)
		say("You're already a Virtue Guard.");
		sleep(1);
		if (yourtype == mytype)
			say ("You didn't lose your shield, did you?");
			var newshield := CreateItemAtLocation (5288, 1176, 0, myshieldtype, 1, REALM_BRITANNIA);
			if (!EquipItem (who, newshield))
				DestroyItem (newshield);
			endif
			return;
		endif
	endif

	if (GetAttributeBaseValue (who, "Strength") < 900)
		say("I dunno... you look a bit weak in the arm, to me...");
		sleep(1);
		say("Maybe the " + otherguards + " Guards would take you.");
		return;
	endif

	var leadership := GetAttributeBaseValue (who, ATTRIBUTEID_LEADERSHIP);
	if (leadership < 600)
		say("Ha haha ha haha ha ha ha!");
		sleep(1);
		say("Oh... mercy!");
		return;
	elseif (leadership < 900)
		say("In order to be a Virtue Guard you must inspire confidence!");
		sleep(1);
		say("Perhaps a bard could teach you to seem more... Commanding.");
		return;
	endif

	if ( GetVirtueAmount (who) < 100 )
		say("A Virtue Guard must have great understanding of the Virtues");
		sleep(1);
		say("Perhaps in time you will come to understand them.");
		return;
	endif

	say("Are you sure you want to be a Virtue Guard?");
	if (!YesNo(who,"Yes!")) return; endif

	say("You have to go forth and smite evil, you know?");
	if (!YesNo(who,"Of course!")) return; endif

	say("Not to mention upholding the Virtues!");
	if (!YesNo(who,"Naturally!")) return; endif

	say("And protect the weak.  You can't forget to protect the weak!");
	if (!YesNo(who,"Ok, Already!")) return; endif

	say("Very well, my friend, I suppose we could give it a try.");
	setobjproperty(who,"guardtype",mytype);
	who.title_prefix := "Squire ";
	who.title_suffix := ", Virtue Guard";
	var newshield := CreateItemAtLocation(who.x , who.y , who.z,
		myshieldtype,1, who.realm);
	EquipItem(who,newshield);
	PlaySoundEffect(who, SFX_SPELL_BLESS);
	PlayObjectCenteredEffect( who, FX_BLESS_EFFECT, 10,10);

	sleep(1);

	say("Make us proud!");

endfunction

function QuitGuards (byref who)
	var mytype := GetObjProperty(me,"guardtype");
	if (!mytype)
		return;
	endif

	var myshieldtype := 0x1bc4; //order
	var otherguards := "Chaos";
	if (mytype == 2)
		myshieldtype := 0x1bc3;//chaos
		otherguards := "Order";
	endif //chaos

	TurnToward(who);

	var yourtype := GetObjProperty(who,"guardtype");
	if (!yourtype) return; endif

	if (yourtype == mytype)
		say("It's a hard life, isn't it?");
	else
		say("I don't blame you.");
	endif

	say("But are you SURE you want to resign?");

	if (YesNo(who,"Quit?"))
		say("Very well, good luck.");
		EraseObjProperty(who,"guardtype");
		who.title_prefix := "";
		who.title_suffix := "";
	endif

endfunction

function process_combat_event (byref ev)
	if (ev.type == EVID_DAMAGED)
		if (GetVital (me, "Life") < CINT (GetVitalMaximumValue (me, "Life") * 0.75))
			ApplyHealing ();
		endif
	endif
	return;
endfunction

function in_combat_event_loop (byref opponent)
	OpenDoors (opponent);
endfunction

function post_combat()

	DisableCombatEvents();
	EnableMainEvents();

	SetWarMode( 0 );
	SetOpponent( 0 );

	sleep(1);
	look_around();

endfunction

function prepare_for_fight (byref opponent)
	if (opponent)
	endif
	DisableMainEvents();
	EnableCombatEvents();

endfunction




///////////////////
//  called when someone does a quest for the guard
///////////////////

function PayForItemDelivery (byref ev)
	var parms := array { };
	parms[1] := me;
	parms[2] := ev.source;
	parms[3] := ev.item;
	start_script (":guards:townguard_quest", parms);
endfunction





///////////////////
//  Called when the guard is restarted
///////////////////

function DoGuardStartupSetup ()
	var mytown := FindMyTown (me);
	if (!mytown)
		return;
	endif
	
	set_critical (1);
	var guardarray := GetGlobalProperty ("#guards_of_town_" + mytown);
	if (!guardarray)
		guardarray := array {};
	endif
	
	if (!(me.serial in guardarray))
		guardarray.append (me.serial);
		SetGlobalProperty ("#guards_of_town_" + mytown, guardarray);
	endif
	set_critical (0);
endfunction
