use uo;
use os;
use cfgfile;

include "include/client";
include "include/gumps";
include "include/attributes";
include "include/crafting";
include "include/objtype";



///////////////////
//  This program is activated by using a mill.  It checks your backpack for items that can be ground,
//  animates the mill, and grinds the ingredients into the product.  The recipes that are valid for
//  grinding are defined in grinding.cfg.
///////////////////

program mill (character, mill_part )
	if (!ReserveItem (mill_part))
		SendSysMessage (character, "You can't use that right now");
		return;
	endif
	
	var other_mill_part;
	//We need to find the other part of the mill so that we can animate it.
	case (mill_part.objtype)
		0x1922:
			other_mill_part := FindOtherMillPart (mill_part, 0x1920);
		0x192e:
			other_mill_part := FindOtherMillPart (mill_part, 0x192c);
		0x1920:
			other_mill_part := mill_part;
			mill_part := FindOtherMillPart (mill_part, 0x1922);
		0x192c:
			other_mill_part := mill_part;
			mill_part := FindOtherMillPart (mill_part, 0x192e);
	endcase
	
	if (!mill_part or !other_mill_part)
		SendSysmessage (character, "That mill appears to be broken.");
		return;
	endif

	//Check through the possible items that can be ground, and let the user choose
	var grinding_recipe := select_what_to_grind (character);
	if (!grinding_recipe)
		return;
	endif

	//data to make sure the characters don't move
	var craftingbag := FindCraftingBag (character);
	var characterx := character.x;
	var charactery := character.y;

	//Send popup menu allowing user to autoloop
	var loopit := YesNo(character,"Autoloop?");

	//Find out how many possible batches we can make
	var makable_batches := cint (check_for_all_ingredients (character, grinding_recipe) / grinding_recipe.ground_amount);
	if (!makable_batches)
		SendSysmessage (character, "You've run out of ingredients!");
		return;
	elseif (makable_batches > 5)
		makable_batches := 5;
	endif

	repeat

		//Now we play the fancy animation for grinding
		animate_mill (character, mill_part, other_mill_part);

		//And then destroy the ingredient
		destroy_ingredient (character, grinding_recipe, makable_batches);
		CreateItemInContainer (craftingbag, grinding_recipe.product_objtype, grinding_recipe.product_amount*makable_batches);
		SendSysmessage (character, "You place the item in your backpack.");
	
		//See if autoloop is turned on.  If not, quit the program.  If so,
		//put in a bit of a delay before the next round of grinding starts
		if (!loopit)
			return;
		else
			sleep (1);
		endif

		makable_batches := cint (check_for_all_ingredients (character, grinding_recipe) / grinding_recipe.ground_amount);
		if (!makable_batches)
			SendSysmessage (character, "You've run out of ingredients!");
			return;
		elseif (makable_batches > 5)
			makable_batches := 5;
		endif


		//Check to see if they have enough ingredients for another batch
		if (!check_for_all_ingredients (character, grinding_recipe) )
			SendSysmessage (character, "You've run out of ingredients!");
			return;
		endif

	//See if the character moved. If so, quit.  Otherwise, loop.
	until (character.x != characterx or character.y != charactery);

endprogram




///////////////////
//  This function goes through a character's backpack and  searches for items that can
//  be ground.  When it finds them, it puts them in a menu so that the character can
//  select which one he wants to make.
///////////////////

function select_what_to_grind (character)

	//First, initialize some variables
	var all_grinding_recipes := ReadConfigFile ("grinding");  //array of all the recipes contained in the config file
	var current_recipe := array {};  //Recipe that is currently being considered for validity
	var selectmenu := CreateMenu ("What do you want to make?");  //Create an empty menu
	var num_recipes := GetConfigMaxIntKey( all_grinding_recipes );  //Number of recipes defined in the config file
	var count;  //used to increment through possible recipes
	var array_valid_recipes := array {};  //Array of valid recipes

	//go through each recipe and see if we have the ingredients for it
	for (count := 1; count <= num_recipes; count := count + 1)
		current_recipe := all_grinding_recipes [count];

		if ( check_for_all_ingredients (character, current_recipe) )
			AddMenuItem(selectmenu,cint(current_recipe.product_objtype), current_recipe.product_name);

			//Add the current recipe to the list with the others and increment the counter
			array_valid_recipes[len(array_valid_recipes)+1] := current_recipe;
		endif
	endfor

	//If there's no recipes that can be made, give error and quit
	if (!len(array_valid_recipes))
		SendSysmessage (character, "You don't have anything that can be ground.");
		return;

	//If there's only 1 possible recipe, just make it automatically
	elseif (len(array_valid_recipes) == 1)
		return array_valid_recipes[1];
	endif

	//Otherwise, display the menu and allow the user to choose
	var selection := SelectMenuItem2 (character, selectmenu);

	//Make sure they selected a valid item
	if (!selection)
		SendSysMessage(character,"Canceled");
		return;
	endif

	//Then return the recipe that was selected
	return array_valid_recipes[selection.index];

endfunction




///////////////////
//  This function checks to see if the player has the neccessary items for the given grinding recipe
///////////////////

function check_for_all_ingredients (character, grinding_recipe)
	var ingredient_array := GetConfigStringArray (grinding_recipe, "ground_item" );
	if ( len (ingredient_array) <= 0 )
		SendSysmessage (character, "There is an error in the recipe for" + grinding_recipe.product_name);
		return 0;
	endif
	
	var makable_batches := 999999;
	
	for ingredient_counter := 1 to len (ingredient_array)
		var current_ingredient := splitwords(ingredient_array[ingredient_counter]);
		var found_ingredient := FindObjtypeInContainer (character.backpack, CINT (current_ingredient[1]));
		if (!found_ingredient)
			return 0;
		elseif (found_ingredient.amount < CINT(current_ingredient[2]))
			return 0;
		else
			ReserveItem (found_ingredient);
			var temp_makable_batches := CINT (found_ingredient.amount/CINT(current_ingredient[2]));
			if (temp_makable_batches < makable_batches)
				makable_batches := temp_makable_batches;
			endif
		endif
	endfor
	
	return makable_batches;
endfunction




///////////////////
//  This is the function that does the fancy animation of the mill
//  and acts as a time delay
///////////////////

function animate_mill (character, mill_part, other_mill_part )
	SendSysmessage (character, "You begin grinding.");
	playsoundeffect (character, 0x021f);

	if (mill_part.objtype == 0x1922)
		mill_part.graphic := 0x1926;
		other_mill_part.graphic := 0x1921;
	else
		mill_part.graphic := 0x1932;
		other_mill_part.graphic := 0x192d;
	endif
	
	sleep(1);

	if (mill_part.objtype == 0x1922)
		other_mill_part.graphic := 0x1925;
	else
		other_mill_part.graphic := 0x1931;
	endif
	
	sleep (1);
	
	SendSysmessage (character, "Almost done.");

	sleep(1);

	if (mill_part.objtype == 0x1922)
		other_mill_part.graphic := 0x1920;
	else
		other_mill_part.graphic := 0x192c;
	endif

	sleep (1);

	if (mill_part.objtype == 0x1922)
		mill_part.graphic := 0x1922;
	else
		mill_part.graphic := 0x192e;
	endif

endfunction




///////////////////
//  Tries to find the other half of the mill
///////////////////

function FindOtherMillPart (mill_part, find_objtype)
	foreach item in ListItemsNearLocation (mill_part.x, mill_part.y, mill_part.z, 1, mill_part.realm)
		if (item.objtype == find_objtype)
			return item;
		endif
	endforeach
	return 0;
endfunction




///////////////////
//  this function destroys the specified amount of the specified ingredient.
///////////////////

function destroy_ingredient (character, grinding_recipe, makable_batches)
	var ingredient_array := GetConfigStringArray (grinding_recipe, "ground_item" );
	if ( len (ingredient_array) <= 0 )
		SendSysmessage (character, "There is an error in the recipe for" + grinding_recipe.product_name);
		return 0;
	endif
	
	for ingredient_counter := 1 to len (ingredient_array)
		var current_ingredient := splitwords(ingredient_array[ingredient_counter]);
		var found_ingredient := FindObjtypeInContainer (character.backpack, CINT (current_ingredient[1]));
		if (found_ingredient)
			if (!SubtractAmount (found_ingredient, (CINT(current_ingredient[2]) * makable_batches)))
				return 0;
			endif
			if (CINT (current_ingredient[1]) == 0x1f9e or CINT (current_ingredient[1]) == 0x09ad)
				CreateItemInContainer (character.backpack, 0x09a7, 1);
			endif
		endif
	endfor
	
	return 1;
endfunction




