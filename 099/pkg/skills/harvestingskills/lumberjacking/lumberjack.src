use uo;
use cfgfile;
use os;
use util;

include "include/client";
include "include/objtype";
include "include/spawn";
include "include/utility";
include "include/crafting";
include "include/attributes";

Const UACTION_CHOP	:= 0x0D;
Const ITEM_SWARM	:= 0x091b;

var craftingbag;

program use_axe (me , axe)
	if (!ReserveItem (axe))
		SendSysMessage (me, "You cannot use that.");
		return;
	endif

	if (!TryToEquipItem (me, axe))
		return;
	endif

	var tree := SelectTreeToChop (me);
	If (tree)
		repeat
		until (!Do_Chops (me, axe, tree, me.x, me.y));
	endif
endprogram

function Do_Chops (character, axe, tree, mex, mey)
	var difficulty := cint (GetHarvestDifficulty ("wood", tree.x, tree.y, tree.objtype, tree.realm));
	if (!difficulty)
		SendSysmessage (character, "There's not enough wood here to chop");
		return 0;
	endif

	difficulty := difficulty + RandomInt(10) + 10;
	for i := 1 to 2
		PerformAction (character, UACTION_CHOP);
		sleep (1);
		PlaySoundEffect (character, SFX_SKILL_LUMBERJACK);
		sleep (1);
		if (character.x != mex or character.y != mey)
			return 0;
		endif
	endfor

	if (CheckSkill (character, SKILLID_LUMBERJACKING, difficulty, 0 ))
		if (DoRandomEvent (character, axe, tree, mex, mey))
			return;
		endif

		var wood_amount := HarvestResource ("wood", tree.x, tree.y, 1, 8, tree.realm);
		if (!wood_amount)
			SendSysmessage (character, "There's not enough wood here to chop.");
			return 0;
		endif

		var skill := GETATTRIBUTE (character, ATTRIBUTEID_LUMBERJACKING);
		wood_amount := RandomInt(CINT(skill/33)) + CINT(skill/33) + 1;
		if (!wood_amount)
			wood_amount := 1;
		endif
		if (character.race == RACE_HUMAN)
			wood_amount := wood_amount + RandomInt(2) + 1;
		endif

		craftingbag := FindCraftingBag (character);
		var the_logs := CreateItemInContainer (craftingbag, UOBJ_LOG, wood_amount);
		if (the_logs)
			PrintTextAbovePrivate (character, "*"+the_logs.amount+" logs*", character);
			return 1;
		else
			PrintTextAbovePrivate (character, "*Your backpack is full!*", character);
			return 0;
		endif
	else
		return 1;
	endif
endfunction

function SelectTreeToChop (me)

	SendSysmessage ( me , "Select a tree to chop." );
	var tree := Targetcoordinates( me );
	if (!tree)
		return 0;
	endif

	var distt := coordist( me.x, me.y, tree.x, tree.y );
	if( distt > 1 )
		SendSysmessage(me,"That is too far away");
		return 0;
	endif

	var difficulty := GetHarvestDifficulty( "wood", tree.x, tree.y, tree.objtype, tree.realm );
	if (difficulty == error)
		SendSysmessage(me, "There's not enough wood here to chop.");
		return 0;
	endif

	if ( CheckIfIsTree(tree.objtype) )
		return tree;
	else
		SendSysmessage(me,"You cannot harvest wood from that.");
	return 0;
	endif
endfunction

function CheckIfIsTree (theobj)
	if (theobj == 0x0c95 or theobj == 0x0c96 or theobj == 0x0c9e)
		return 1;
	elseif (theobj == 0x0ca8 or theobj == 0x0caa or theobj == 0x0cab)
		return 1;
	elseif (theobj >= 0x0cc8 and theobj <= 0x0cea)
		return 1;
	elseif (theobj >= 0x0cf8 and theobj <= 0x0d03)
		return 1;
	elseif (theobj == 0x0d37 or theobj == 0x0d38)
		return 1;
	elseif (theobj >= 0x0d41 and theobj <= 0x0dab)
		return 1;
	elseif (theobj >= 0x12b6 and theobj <= 0x12c7)
		return 1;
	else
		return 0;
	endif
endfunction

function TryToEquipItem (character, item)
	foreach equipped_item in ListEquippedItems (character)
		if (equipped_item == item)
			return 1;
		endif
	endforeach

	if (!InInventory (character.backpack, item))
		SendSysMessage (character, "The item must be in your backpack to use it!");
		return 0;
	endif

	if (!item.movable)
		SendSysMessage (character, "You cannot use that item!");
		return 0;
	endif

	if (!ReserveItem (item))
		SendSysMessage (character, "That item is already being used by someone!");
		return 0;
	endif
	
	//Just try to equip it to be a bit faster
	if (EquipItem (character, item))
		sleep (2);
		return 0;
	endif

	var thepack := item.container;
	if (!thepack)
		thepack := character.backpack;
	endif
	
	//Unequip old items to equip this one
	var item_hand_one := GetEquipmentByLayer (character, LAYER_HAND1);
	MoveItemToContainer (item_hand_one, thepack);
	var item_hand_two := GetEquipmentByLayer (character, LAYER_HAND2);
	MoveItemToContainer (item_hand_two, thepack);
	if (EquipItem (character, item))
		//try to requip whatever else they had and we're done
		EquipItem (character, item_hand_one);
		EquipItem (character, item_hand_two);
		sleep (2);
		return 0;
	endif
	
	//failure...
	SendSysmessage (character, "You have to equip that to lumberjack!");
	EquipItem (character, item_hand_one);
	EquipItem (character, item_hand_two);
	return 0;
endfunction



///////////////////
//  makes sure that the item given is one that can be removed
///////////////////

function RemoveIt (byref character, byref it)
	if (it == GetEquipmentByLayer (character, LAYER_BEARD))
		return 0;
	elseif (it == GetEquipmentByLayer (character, LAYER_HAIR))
		return 0;
	elseif (it == GetEquipmentByLayer (character, LAYER_MOUNT))
		return 0;
	elseif (it == GetEquipmentByLayer (character, LAYER_HAIR))
		return 0;
	elseif (it == (character.backpack))
		return 0;
	endif	

	return 1;
endfunction



function DoRandomEvent (me, axe, tree, mex, mey)
	if (axe and mex and mey)
	endif
	if (RandomInt (20))
		return 0;
	endif
	
	case (RandomInt (10))
		0:
		1:
		2:
		3:
		4:
		5:
			CreateItemInContainer (craftingbag, UOBJ_DEAD_WOOD, 1);
			SendSysmessage (me, "You have found some deadwood!");
			return 0;
		6:
		7:
			CreateItemInContainer (craftingbag, 0x0F25, 1);
			SendSysmessage (me, "You find a chunk of fossilized sap!");
			return 0;

		8:
			SendSysmessage (me, "You disturbed a bee hive!");
			CreateItemAtLocation (tree.x, tree.y, tree.z, ITEM_SWARM, 1, tree.realm);
			return 1;
		9:
			SpawnNPCInArea ("ent", me.x, me.y, 4, 20, me.realm);
			SendSysmessage (me, "You have angered a Wood Spirit!");
			return 1;
	endcase
	return 0;
endfunction