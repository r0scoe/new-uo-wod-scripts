use uo;
use os;

include "include/client";
include "include/eventid";
include "include/gumps";

var my_party;

program manage_party (me, text)

	my_party := GetObjProperty (me, "#party");
	if (!my_party)
		my_party := GetNewPartyID ();
		SetObjProperty (me, "#party", my_party);
	endif

	if (text == "on")
		if (me.dead)
			EraseObjProperty (me, "#groupspeak");
			SendSysMessage (me, "Use '.group msg' to send messages while dead.");
			return;
		endif

		if (!GetObjProperty (me, "#groupspeak"))
			TurnGroupSpeakOn (me);
			return;
		else
			SendSysMessage (me, "You're already speaking to your party!");
			return;
		endif

	elseif (text == "off")
		EraseObjProperty (me, "#groupspeak");
		SendSysMessage (me, "Messages to group turned off.");
		return;

	elseif (text == "join")
		JoinAnotherGroup (me);
		return;

	elseif (text == "members")
		DisplayAllGroupMembers (me);
		return;

	elseif (text == "quit")
		QuitGroup (me);
		return;

	elseif (text == "message" or text == "msg")
		SendMessageToGroup (me);
		return;

	endif

	SendSysMessage (me, "Valid usage is .group [option], where option can be:");
	SendSysMessage (me, "join: pick a group to join");
	SendSysMessage (me, "quit: quit your group");
	SendSysMessage (me, "on: what you say will be transmited to your group");
	SendSysMessage (me, "off: turn off transmission to group");
	SendSysMessage (me, "message: enter a sentence to be transmited to your group");

endprogram




///////////////////
//  gets a party counter out of the global pool
///////////////////

function GetNewPartyID ()

	set_critical (1);
	var party_counter := GetGlobalProperty ("#partynumber");
	if (!party_counter)
		party_counter := 1;
		SetGlobalProperty ("#partynumber", 2);
	else
		SetGlobalProperty ("#partynumber", party_counter + 1);
	endif
	set_critical (0);

	return party_counter;

endfunction




///////////////////
//  Turns groupspeak on by making the character's backpack a listener
///////////////////

function TurnGroupSpeakOn (me)

	SetObjProperty (me, "#groupspeak", 1);
	var mybackpack := me.backpack;
	RegisterForSpeechEvents (mybackpack, 0);
	var ev;

	SendSysMessage (me, "Messaging to group turned on.");

	repeat

		ev := wait_for_event (2);

		//if they've turned off groupspeak, exit
		if (!GetObjProperty (me, "#groupspeak") )
			return;
		endif

		//if they've switched to a new party, change with it
		if (my_party != GetObjProperty (me, "#party") )
			my_party := GetObjProperty (me, "#party");
		endif

		if (me.dead)
			EraseObjProperty (me, "#groupspeak");
			sleep (4);
			SendSysMessage (me, "Group messages turned off.  Use '.group message' to send messages while dead.");
		endif

        	if (ev and ev.type == EVID_SPEECH and ev.source == me)
			var message := DetermineMessageText (me, ev.text);
			if (message)
				SendMessageToAllPartyMembers (message);
			endif
		endif

	until (!me);

endfunction




///////////////////
//  sends a message to all the members of the party
///////////////////

function SendMessageToAllPartyMembers (text);

	if (!text)
		return;
	endif

	foreach player in EnumerateOnlineCharacters ()
		if (GetObjProperty (player, "#party") and GetObjProperty (player, "#party") == my_party)
			SendSysMessage (player, text, FONT_NORMAL, 1320);
		endif
	endforeach

endfunction




///////////////////
//  Lists all the members of a party
///////////////////

function DisplayAllGroupMembers (me);

	foreach player in EnumerateOnlineCharacters ()
		if (GetObjProperty (player, "#party") and GetObjProperty (player, "#party") == my_party)
			SendSysMessage (me, player.name);
		endif
	endforeach

endfunction




///////////////////
//  quits a group
///////////////////

function QuitGroup (me)

	SendMessageToAllPartyMembers (me.name + " leaves the group");
	EraseObjProperty (me, "#party");
	EraseObjProperty (me, "#groupspeak");

endfunction




///////////////////
//  lets the character pick another person to group with
///////////////////

function JoinAnotherGroup (me)

	SendSysMessage (me, "Pick another character to invite to your group.");
	var new_member := Target (me);

	if (!new_member)
		SendSysMessage (me, "Canceled.");
		return;
	endif

	if (!new_member.acctname)
		SendSysmessage (me, "You can't join a group with that!");
		return;
	endif

	if (!YesNo (new_member, "Join " + me.name + "'s group?") )
		SendSysMessage (me, new_member + " refuses to group with you.");
		return;
	endif

	//if they don't have a group, its easy
	var other_party := GetObjProperty (new_member, "#party");
	if (!other_party)
		SetObjProperty (new_member, "#party", my_party);
		return;
	endif


	//lots of junk, just so that it displays everyone who joins the group
	var list_of_old_members := array{};
	var list_of_new_members := array{};

	foreach player in EnumerateOnlineCharacters ()

		if (GetObjProperty (player, "#party") == other_party)
			list_of_old_members.append (player);
		endif

		if (GetObjProperty (player, "#party") == my_party)
			list_of_new_members.append (player);
			SetObjProperty (player, "#party", other_party);
		endif

	endforeach

	foreach player in list_of_old_members
		foreach player2 in list_of_new_members
			SendSysMessage (player, player2.name + " joins the group.");
			SendSysMessage (player2, player.name + " joins the group.");
		endforeach
	endforeach


endfunction




///////////////////
//  sends a text entry gump so that the person can enter a 1 line message to the group
///////////////////

function SendMessageToGroup (me)

	var text := SendTextEntryGump (me, "Message for group:", TE_CANCEL_ENABLE, TE_STYLE_NORMAL, 60);
	if (text)
		text := CStr (me.name + " says: " + text);
		SendMessageToAllPartyMembers (text);
	endif

endfunction




///////////////////
//  determines the message to be sent to the other players, so we can filter out pet commands
///////////////////

function DetermineMessageText (me, text)

	case (text)
		"all stop":
		"all follow":
		"all follow me":
		"all guard":
		"all guard me":
		"all attack":
			return "";
	endcase

	text := CStr (me.name + " says: " + text);
	return text;

endfunction