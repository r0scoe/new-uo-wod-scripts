use uo;
use os;
use storage;

include "include/utility";
include ":npcs:npcinfo";

program restart_AI (character)
	var number := 0;

	var realms := array { REALM_BRITANNIA, REALM_BRITANNIA_ALT, REALM_ILSHENAR, REALM_MALAS, REALM_TERMUR };
	var xmid, ymid;
	var RealmMaxX := 0;
	var RealmMaxY := 0;

	foreach realm in realms
		case (realm)
			REALM_BRITANNIA:
			REALM_BRITANNIA_ALT:
				RealmMaxX := 7168;
				RealmMaxY := 4096;
			REALM_ILSHENAR:
				RealmMaxX := 2304;
				RealmMaxY := 1600;
			REALM_MALAS:
				RealmMaxX := 2560;
				RealmMaxY := 2048;
			REALM_TERMUR:
				RealmMaxX := 1280;
				RealmMaxY := 4096;
		endcase
		SendSysMessage (character, "Searching realm: " + realm);

		for (xmid := 31; xmid < RealmMaxX; xmid := xmid + 64)
			SendSysMessage (character, "Searching X = " + xmid);			
			for (ymid := 31; ymid < RealmMaxY; ymid := ymid + 64)
				foreach item in ListObjectsInBox (xmid-31, ymid-31, -128, xmid+32, ymid+32, +127, realm)
					if (item.npctemplate)
						if (item.script == "playermerchant")
							RequalityItems (item);
							EraseObjProperty (item, "restock");
							number := number + 1;
//						elseif (item.script == "merchant")
//							RestockMerchant (item);
//							SetObjProperty (item, "restock", 1);
						endif
					endif
				endforeach
			endfor
			sleepms (100);
		endfor
	endforeach
	// Tokuno's dimensions aren't a multiple of 64
	RealmMaxX := 1448;
	RealmMaxY := 1448;
	SendSysMessage (character, "Searching realm: tokuno");
	for (xmid := 90; xmid < RealmMaxX; xmid := xmid + 181)
		SendSysMessage (character, "Searching X = " + xmid);			
		for (ymid := 90; ymid < RealmMaxY; ymid := ymid + 181)
			foreach item in ListObjectsInBox (xmid-90, ymid-90, -128, xmid+90, ymid+90, +127, REALM_TOKUNO)
				if (item.npctemplate)
					if (item.script == "playermerchant")
						RequalityItems (item);
						EraseObjProperty (item, "restock");
						number := number + 1;
//					elseif (item.script == "merchant")
//						RestockMerchant (item);
//						SetObjProperty (item, "restock", 1);
					endif
				endif
			endforeach
		endfor
		sleepms (10);
	endfor
	SendSysMessage (character, "Total NPCs restarted: " + number);

endprogram

function RequalityItems (me)
	var storage := FindStorageArea ("Merchant Storage");
	var inv_fs := find_or_create_item (storage, me.serial + " FS", 0xE7C);

	Requality (inv_fs);
endfunction

function Requality (byref inventory)
	foreach item in ListRootItemsInContainer ( inventory )
		if ( item.quality )
			item.quality := 1.2;
			item.hp := item.maxhp;
		endif
	endforeach
endfunction

function RestockMerchant (me)
	var MyTemplateElem := GetNpcTemplateElem (me.npctemplate);
	var merchant_type := MyTemplateElem.MerchantType;
	
	var storage := FindStorageArea ("Merchant Storage");
	var inv_fs := find_or_create_item (storage, me.serial + " FS", 0xE7C);

	RestockInventory (merchant_type, inv_fs);
endfunction

function RestockInventory (merchanttype, byref inventory)
	UnloadConfigFile (":merchants:mrcspawn");
	var mrcspawn_cfg := ReadConfigFile(":merchants:mrcspawn");

	foreach item in ListRootItemsInContainer (inventory)
		DestroyItem (item);
	endforeach

	foreach productgroup in ProductGroups (mrcspawn_cfg, merchanttype)
		Restock (mrcspawn_cfg, inventory, productgroup);
	endforeach

	foreach item in ListRootItemsInContainer ( inventory )
		if ( item.quality )
			item.quality := 1;
			item.hp := item.maxhp;
		endif
	endforeach
endfunction


function ProductGroups (byref mrcspawn_cfg, mtype)
	var mtype_elem := FindConfigElem ( mrcspawn_cfg, mtype );
	if (!mtype_elem)
		return 0;
	endif

	return GetConfigStringArray (mtype_elem, "Sells");
endfunction




///////////////////
//  restocks the given group of items in the merchant's inventory, if those items need
//  to be restocked
///////////////////

function Restock (byref mrcspawn_cfg, byref inventory, byref productgroup)

	var pg_elem := FindConfigElem (mrcspawn_cfg, productgroup);
	foreach itemstr in GetConfigStringArray (pg_elem, "Item")
		sleepms(100);
		SpawnItem (inventory, itemstr);
	endforeach

	foreach itemstr in GetConfigStringArray( pg_elem, "Multibag" )
		sleepms(100);
		var baglist := splitwords(itemstr);
		var spawnelem := FindConfigElem(mrcspawn_cfg, baglist[1] );
		var desc := spawnelem.desc;
		var stuffarray := GetConfigStringArray( spawnelem, "Item" );
		SpawnMultiBag( inventory, desc, stuffarray, cint(baglist[2]) );
	endforeach

endfunction




///////////////////
//  takes the string passed and creates the item specified in it
///////////////////

function SpawnItem (byref inventory, itemstr)

	var ii := SplitWords( itemstr );
	var objtype := ii[1];
	if (cint(objtype))
		objtype := cint(objtype);
	else
		objtype := GetObjtypeByName (objtype);
	endif

	var count := CInt(ii[2]);
	CreateItemInInventory (inventory, objtype, count);

endfunction




///////////////////
//  creates a bag with several different items in it (used for bags of regs)
///////////////////

function SpawnMultiBag (byref inventory, desc, stuffarray, number)

	var itemdesc := ReadConfigFile (":*:itemdesc");
	if (!itemdesc)
		return;
	endif

	for i := 1 to number
		var regbag := CreateItemInContainer (inventory,	UOBJ_BAG, 1);
		if (!regbag)
			return;
		endif

		regbag.name := desc;
		regbag.sellprice := 10;

		foreach item in stuffarray
			var parms := splitwords(item);

			var elem := FindConfigElem(itemdesc,cint(parms[1]));
			if (!elem)
				return;
			endif
			var itemprice := GetConfigInt(elem,"vendorsellsfor");
			if (!itemprice)
				return;
			endif

			var it := CreateItemInContainer(regbag,cint(parms[1]),cint(parms[2]));
			if (!it)
				return;
			endif
			regbag.sellprice := regbag.sellprice + ( itemprice * it.amount );
		endforeach
	endfor
endfunction
