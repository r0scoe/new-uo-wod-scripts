use uo;
use os;
use util;
use cfgfile;

include "include/client";
include "include/objtype";
include "include/utility";
include "include/string";
include "include/accounts";
include "include/gumps";

var mapobjtypes := array{0x16003, 0x16004, 0x16005, 0x16006, 0x16007};

program fix_armor (character, text)
	if (text)
	endif
	SendSysMessage (character, "This will search through all the backpacks and bankboxes in");
	SendSysMessage (character, "the world and fix old treasure maps.  PLEASE only run this if");
	SendSysMessage (character, "necessary.  It will take a while...");
	
	if (!YesNo (character, "Continue?"))
		SendSysMessage (character, "Good boy.  Canceled.");
		return;
	endif

	var xmid, ymid;
	var total_item_count := 0;
	for (xmid := 31; xmid < 7168; xmid := xmid + 64)
		SendSysMessage (character, "Searching near X=" + xmid );
		for (ymid := 31; ymid < 4096; ymid := ymid + 64)
			foreach item in ListObjectsInBox (xmid-32, ymid-32, -128, xmid+32, ymid+32, +127, REALM_BRITANNIA)
				if (item.isa (POLCLASS_NPC))
					foreach subitem in EnumerateItemsInContainer (item.backpack)
						if (subitem.objtype in mapobjtypes)
							if (!subitem.gumpheight)
								subitem.usescript := ":treasuremap:decodemap";
								total_item_count := total_item_count + 1;
							endif
						endif
					endforeach
					foreach subitem in ListEquippedItems (item)
						if (subitem.objtype in mapobjtypes)
							if (!subitem.gumpheight)
								subitem.usescript := ":treasuremap:decodemap";
								total_item_count := total_item_count + 1;
							endif
						endif
					endforeach
				elseif (item.isa (POLCLASS_CONTAINER))
					foreach subitem in EnumerateItemsInContainer (item)
						if (subitem.objtype in mapobjtypes)
							if (!subitem.gumpheight)
								subitem.usescript := ":treasuremap:decodemap";
								total_item_count := total_item_count + 1;
							endif
						endif
					endforeach
				endif
			endforeach
		endfor
		sleep (1);
	endfor

	SendSysMessage (character, "Total item found: " + total_item_count);
	SendSysMessage (character, "Done fixing items in world.  Stage 2: fixing accounts");

	var account, player;
	foreach acctname in ListAccounts ()
		account := FindAccount (acctname);
		if (account)
			for counter := 1 to 7
				player := account.GetCharacter (counter);
				if (player)
					foreach subitem in EnumerateItemsInContainer (player.backpack)
						if (subitem.objtype in mapobjtypes)
							if (!subitem.gumpheight)
								subitem.usescript := ":treasuremap:decodemap";
								total_item_count := total_item_count + 1;
							endif
						endif
					endforeach
				endif
			endfor
			var bankbox := FindBankBox (acctname, 1);
			if (bankbox)
				foreach subitem in EnumerateItemsInContainer (bankbox)
						if (subitem.objtype in mapobjtypes)
							if (!subitem.gumpheight)
								subitem.usescript := ":treasuremap:decodemap";
								total_item_count := total_item_count + 1;
							endif
						endif
				endforeach
			endif
		endif
		sleepms (1);
	endforeach

	SendSysMessage (character, "Total item found: " + total_item_count);
	SendSysMessage (character, "Done fixing accounts.  Stage 3: merchant bankboxes");
	
	var playermerchantlist := GetGlobalProperty ("#playermerchantlist");
	var storage := FindStorageArea( "Merchant Storage" );

	foreach merchantserial in playermerchantlist
		var inv_fs := FindRootItemInStorageArea (storage, merchantserial + " 1C");
		if (inv_fs)
			foreach subitem in EnumerateItemsInContainer (inv_fs)
				if (subitem.objtype in mapobjtypes)
					if (!subitem.gumpheight)
						subitem.usescript := ":treasuremap:decodemap";
						total_item_count := total_item_count + 1;
					endif
				endif
			endforeach
		endif
	endforeach
	
	SendSysMessage (character, "Total item found: " + total_item_count);
	SendSysMessage (character, "Done fixing merchants.  Stage 4: auctioneer items");
	
	var auccat := array {
		"auc_weapons_general",
		"auc_armor_general",
		"auc_clothing_general",
		"auc_decorative_general",
		"auc_other_general"
	};
	storage := find_or_create_storage ( "Auction Storage" );
	foreach cat in auccat
		var inv_fs := FindRootItemInStorageArea (storage, cat);
		if (inv_fs)
			foreach subitem in EnumerateItemsInContainer (inv_fs)
				if (subitem.objtype in mapobjtypes)
					if (!subitem.gumpheight)
						subitem.usescript := ":treasuremap:decodemap";
						total_item_count := total_item_count + 1;
					endif
				endif
			endforeach
		endif
	endforeach
	
	
	
	
	SendSysMessage (character, "Total item found: " + total_item_count);
endprogram

function IsFixableArmor (item)
	case (item.objtype)
		0x1F03:
		0x204E:
		0x153B:
		0x153D:
		0x1541:
		0x1EFD:
		0x1EFF:
		0x1F01:
		0x1F7B:
		0x1F9F:
		0x1FA1:
		0x1FFD:
		0x1515:
		0x1517:
		0x153A:
		0x1516:
		0x152E:
		0x1537:
		0x1539:
		0x170D:
		0x170F:
		0x170B:
		0x1711:
		0x153F:
		0x1543:
		0x1713:
		0x1714:
		0x1715:
		0x1716:
		0x1717:
		0x1718:
		0x1719:
		0x171A:
		0x171B:
		0x171C:
			return 1;
	endcase
	return 0;
endfunction





