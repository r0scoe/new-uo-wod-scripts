use uo;
use os;
use datafile;

program textcmd_guardspawner (character, text)
	SendSysMessage (character, "Trying to add John Malark spawn at current location");
	UnloadDataFile (":guardspawner:guardspawn");
	var guardspawn_df := OpenDataFile (":guardspawner:guardspawn");
	if (!guardspawn_df)
		guardspawn_df := CreateDataFile (":guardspawner:guardspawn");
		if (!guardspawn_df)
			SendSysMessage (character, "Unable to open guard spawn file");
			Syslog ("Error opening guardspawn data file!");
			return;
		endif
	endif

	//make sure the name isn't already used
	if (guardspawn_df.FindElement("guardspawner_john_malark"))
		SendSysMessage (character, "John Malark already exists");
		SendSysMessage (character, "delete guardspawner route 'guardspawner_john_malark'");
		return;
	endif

	//Now get down to selecting locations
	SendSysMessage (character, "Target the location where the guard should start/spawn:");
	SendSysMessage (character, "(Your facing determines facing of guard)");
	var startloc := TargetCoordinates (character);
	if (!startloc)
		SendSysMessage (character, "Canceled");
		return;
	endif

	//save the data and finish up
	UnloadDataFile (":guardspawner:guardspawn");
	guardspawn_df := OpenDataFile (":guardspawner:guardspawn");
	if (!guardspawn_df)
		SendSysMessage (character, "Error saving data:  datafile no longer exists");
		return;
	endif
	guardspawn_df.CreateElement("guardspawner_john_malark");
	var thespawn := guardspawn_df.FindElement("guardspawner_john_malark");
	if (!thespawn)
		SendSysMessage (character, "Unable to create element in datafile");
		return;
	endif
	
	thespawn.SetProp ("npctemplate", ":guardspawner:guardspawner_john_malark");
	thespawn.SetProp ("spawnloc", {startloc.x, startloc.y, startloc.z});
	thespawn.SetProp ("spawnfacing", character.facing);

	UnloadDataFile (":guardspawner:guardspawn");
endprogram
