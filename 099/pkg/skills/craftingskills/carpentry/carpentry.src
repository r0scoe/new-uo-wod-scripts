use uo;
use os;
use util;
use cfgfile;

include "include/client";
include "include/objtype";
include "include/itemtypes";
include "include/gumps";
include "include/string";
include "include/magicitems";
include "include/utility";
include "include/attributes";
include "include/crafting";
include "../pkg/skills/craftingskills/carpentry/carpentry";

program use_carpentry_tool ( character, tool )
	if (!ReserveItem (tool) )
		SendSysMessage (character, "You cannot use that right now.");
		return;
	endif

	SendSysmessage (character, "What would you like to use that on?" );
	var use_on := Target (character);
	if (!use_on)
		SendSysMessage (character, "Canceled.");
		return;
	endif

	if (!Accessible (character, use_on) )
		SendSysMessage (character, "You can't reach that!");
		return;
	endif

	if (!ReserveItem (use_on) )
		SendSysMessage (character, "You can't use that right now.");
		return;
	endif

	if (IsWoodenWeapon (use_on) )
		RepairCarpentryItem (character, tool, use_on, SKILLID_CARPENTRY);
		return;
	elseif (IsWoodenShield (use_on) )
		RepairCarpentryItem (character, tool, use_on, SKILLID_CARPENTRY);
		return;
	elseif (IsWoodenArmor (use_on) )
		RepairCarpentryItem (character, tool, use_on, SKILLID_CARPENTRY);
		return;
	elseif (IsLogType(use_on))
		MakeCarpentryItems (character, tool, use_on);
		return;
	else
		SendSysMessage (character, "You don't know how to use those together.");
		return;
	endif
endprogram




///////////////////
//  allows the user to make items out of logs
///////////////////

function MakeCarpentryItems (character, tool, logs)
	if (!CheckSkillForDifferentWoods (character, logs.objtype) )
		SendSysmessage (character, "You have no chance to successfully work with that wood.");
		return;
	endif
	//calls the SelectWhatToMakeFromMenu function found in makemenu.inc, in /scripts/include
	var carpentry_cfg_file := ReadConfigFile ( "carpentry" );    
	var chosen_item := SelectWhatToMakeFromMenu (character, "mainmenu", carpentry_cfg_file, GetAttribute (character, ATTRIBUTEID_CARPENTRY), logs.amount, "Carpentry:" );
	if (!chosen_item)
		SendSysmessage (character, "Canceled.");
		return;
	endif

	if (chosen_item == UOBJ_SHAFT)
		MakeShafts (character, logs);
		return;
	elseif (chosen_item == UOBJ_KINDLING)
		MakeKindling (character, logs);
		return;
	endif

	//find the item in carpentry.cfg file
	var selection := FindConfigElem (carpentry_cfg_file, chosen_item);
	if (!selection)
		SendSysMessage (character, "That was an invalid selection");
		if (tool)
		endif
		return;
	endif

	var material_needed := cint (selection.material);
	var item_skill := cint (selection.skill);
	var time_delay := cint (selection.time);
	var item_lockable := selection.lockable;
	var item_stackable := selection.stackable;
	var item_name := selection.name;
	SendSysMessage(character, "(Skill: " + item_skill + ", Logs: " + material_needed + ")");

	//save the character's position and ask them how many they want to make
	var craftingbag := FindCraftingBag (character);
	var characterx := character.x;
	var charactery := character.y;
	var amax := CINT (logs.amount/material_needed);
	if (!amax)
		SendSysMessage (character, "You don't have enough logs to make that!");
		return;
	elseif (amax > 10)
		amax := 10;
	endif
	var items_to_make := CINT (Sendtextentrygump (character, "How many do you want to make?:", 
				TE_CANCEL_DISABLE, TE_STYLE_NORMAL, 10, "(Max: " + amax + ", 0 to cancel)"));
	if (!items_to_make)
		SendSysMessage (character, "Canceled.");
		return;
	endif

	//save the character's position and ask them if they want to autoloop
	var autoupgrade := 0;;
	if (selection.has_quality)
		autoupgrade := YesNo (character, "AutoUpgrade?");
	endif

	var created_item;
	repeat
		created_item := 0;
		if (logs.amount < material_needed or !logs)
			SendSysmessage (character, "You don't have enough logs to continue!");
			return;
		endif

		PlaySoundEffect (character, SFX_CARPENTRY);
		sleep (3);
		for i := 1 to time_delay
			if (RandomInt (4) == 0)
				PlaySoundEffect (character, SFX_CARPENTRY);
				sleep (3);
			else
				PlaySoundEffect(character, SFX_HAMMER);
				sleepms (1500);
				PlaySoundEffect(character, SFX_HAMMER);
				sleepms (1500);
			endif
		endfor
		PlaySoundEffect(character, SFX_HAMMER);

		if (!CheckSkill (character, SKILLID_CARPENTRY, item_skill, 0))
			var lossamount := RandomInt (CINT ( material_needed/3) )+1;
			SubtractAmount (logs, lossamount);
			SendSysmessage (character, "You fail, destroying some logs.");
		else
			created_item := CreateItemInContainer (craftingbag, chosen_item, 1);
			if (!created_item)
				PrintTextAbovePrivate (character, "*Your backpack is full!*", character);
				return;
			endif

			created_item.movable := 1;
			created_item.buyprice := 0;
			SendSysMessage (character, "You place the item in your backpack.");
			//set the color
			if (logs.color)
				created_item.color := logs.color;
			endif
			SetObjProperty (created_item, "material_objtype", logs.objtype);
			SubtractAmount (logs, material_needed);
			if (!item_stackable)
				created_item.name := item_name + " [crafted by " + character.name + "]";
				created_item.hp := created_item.maxhp;
			endif

			if (item_lockable)
				if ( CheckSkill (character, SKILLID_TINKERING, 40, 0) )
					PrintTextAbovePrivate (character, "Lockable!", character);
					SetObjProperty (created_item, "lockable", "1");
					var lockid := AllocLockId ();
					var thekey := CreateItemInContainer (created_item, UOBJ_COPPER_KEY, 1); 
					SetObjProperty (thekey, "lockid", lockid);
					SetObjProperty (created_item, "lockid", lockid);
				endif
			endif

			if (autoupgrade)
				var upgrade_material := CINT (material_needed/2);
				if (logs.amount < upgrade_material)
					SendSysMessage (character, "You don't have enough logs to upgrade that item!");
					return;
				endif
				
				var upgrade_skill := item_skill + 15;
				if (upgrade_skill > 110)
					upgrade_skill := 110;
				endif
				if (upgrade_skill >= GetAttribute (character, ATTRIBUTEID_CARPENTRY) + 20)
					SendSysMessage (character, "Your skill is too low to upgrade that item.");
					return;
				endif

				if (characterx != character.x or charactery != character.y)
					SendSysMessage (character, "You stop crafting.");
					return;
				endif

				PerformCarpentryItemUpgrade (character, created_item, logs, upgrade_material,
						SKILLID_CARPENTRY, upgrade_skill, item_name);
			endif
		endif
		
		if (characterx != character.x or charactery != character.y)
			SendSysMessage (character, "You stop crafting.");
			return;
		endif
		
		if (created_item)
			items_to_make := items_to_make - 1;
		endif
		sleep (2);

	until (!items_to_make);
	SendSysMessage (character, "You stop crafting.");  
endfunction




///////////////////
//  makes arrow shafts
///////////////////

function MakeShafts (character, logs)

	var sx := character.x;
	var sy := character.y;

	repeat
		if (!logs)
			SendSysMessage (character, "You run out of logs.");
			return;
		endif

		PlaySoundEffect (character, SFX_56);
		PerformAction ( character, ANIM_SALUTE );
		sleep (2);

		var logs_used := logs.amount;
		if (logs_used > 5)
			logs_used := 5;
		endif

		var shaft_amount := logs_used * 5;

		if (CheckSkill (character, SKILLID_CARPENTRY, 20, 0) )
			var shafts := CreateItemInBackpack (character, UOBJ_SHAFT, shaft_amount);
			if (!shafts)
				PrintTextAbovePrivate (character, "*Your backpack is full*", character);
				return;
			endif

			SubtractAmount (logs, logs_used);
		else
			SendSysMessage (character, "You destroy some logs.");
			SubtractAmount (logs, 1);
		endif

	until (sx != character.x or sy != character.y);

	return;

endfunction




///////////////////
//  makes kindling
///////////////////

function MakeKindling (character, logs)

	var sx := character.x;
	var sy := character.y;

	repeat
		if (!logs)
			SendSysMessage (character, "You run out of logs.");
			return;
		endif

		PlaySoundEffect (character, SFX_56);
		PerformAction ( character, ANIM_SALUTE );
		sleep (2);

		if (CheckSkill (character, SKILLID_CARPENTRY, 5, 0) )
			var kindling := CreateItemInBackpack (character, UOBJ_KINDLING, 5);
			if (!kindling)
				PrintTextAbovePrivate (character, "*Your backpack is full*", character);
				return;
			endif

			SubtractAmount (logs, 1);
		else
			SendSysMessage (character, "You destroy some logs.");
			SubtractAmount (logs, 1);
		endif

	until (sx != character.x or sy != character.y);

	return;

endfunction

function CheckSkillForDifferentWoods (byref character, byref logtype)

	var character_skill := GetAttribute (character, ATTRIBUTEID_CARPENTRY);

	case ( logtype )
		UOBJ_LOG:
			return 1;   //anyone can work with normal wood
		UOBJ_OAKLOG:
			if (character_skill > 60)
				return 1;
			endif
		UOBJ_ASHLOG:
			if (character_skill > 75)
				return 1;
			endif
		UOBJ_YEWLOG:
			if (character_skill > 90)
				return 1;
			endif
		UOBJ_HEARTWOODLOG:
			if (character_skill > 98)
				return 1;
			endif
 		UOBJ_BLOODWOODLOG:
			if (character_skill > 98)
				return 1;
			endif
		UOBJ_FROSTWOODLOG:
			if (character_skill > 98)
				return 1;
			endif
 		UOBJ_SUNWOODLOG:
			if (character_skill > 98)
				return 1;
			endif
	endcase
	return 0;
endfunction



