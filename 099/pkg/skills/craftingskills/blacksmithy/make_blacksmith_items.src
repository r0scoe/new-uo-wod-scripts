use uo;
use os;
use util;
use cfgfile;
use math;

include "include/client";
include "include/objtype";
include "include/itemtypes";
include "include/gumps";
include "include/string";
include "include/magicitems";
include "include/crafting";
include "blacksmithy";

program use_hammer (character, hammer)
	if (!ReserveItem (hammer))
		SendSysMessage (character, "You cannot use that right now.");
		return;
	endif

	SendSysmessage (character, "What would you like to use that on?" );
	var use_on := Target (character);
	if (!use_on)
		SendSysmessage (character, "Canceled.");
		return;
	endif

	if (!Accessible (character, use_on) )
		SendSysmessage( character, "You can't reach that!" );
		return;
	endif

	if (!ReserveItem(use_on))
		SendSysmessage (character, "You cannot use that right now.");
		return;
	endif

	if (IsIngot (use_on.objtype) )
		MakeBlacksmithyItems (character, hammer, use_on);
		return;
	elseif (IsMetalArmor (use_on) or IsMetalWeapon (use_on) or IsMetalShield (use_on) )
		RepairBlacksmithyItem (character, hammer, use_on, SKILLID_BLACKSMITHY);
		return;
	elseif (use_on.graphic >= 0x2878 and use_on.graphic <= 0x287c)
		DoColorCoating (character, use_on, SKILLID_BLACKSMITHY);
		return;
	else
		SendSysMessage (character, "You don't know how to use those together.");
		return;
	endif
endprogram




///////////////////
//  Called when the item targetted was an ingot, allowing the player to make an item
///////////////////

function MakeBlacksmithyItems (byref character, byref hammer, byref material)
	if (!SearchForAnvilInArea (character) )
		SendSysmessage (character, "You must be near an anvil to make anything.");
		return;
	endif

	if (!CheckSkillForDifferentMetals (character, material.objtype) )
		SendSysmessage (character, "You have no chance to successfully work with that metal.");
		return;
	endif

	//calls the SelectWhatToMakeFromMenu function found in makemenu.inc, in /scripts/include
	var smith_cfg_file := ReadConfigFile ("blacksmithy");
	var chosen_item := SelectWhatToMakeFromMenu (character, "mainmenu", smith_cfg_file, GetAttribute (character, ATTRIBUTEID_BLACKSMITHY), material.amount, "Blacksmithy:" );
	if (!chosen_item)
		SendSysmessage (character, "Canceled.");
		return;
	endif

	//find the item in blacksmithy.cfg file
	var selection := FindConfigElem (smith_cfg_file, chosen_item);
	if (!selection)
		SendSysMessage (character, "That was an invalid selection");
		return;
	endif

	var material_needed := Cint (selection.material);
	var item_skill := Cint (selection.skill);
	var time_delay := Cint (selection.time);
	var item_name := selection.name;
	SendSysMessage(character, "(skill: " + item_skill + ", Ingots: " + material_needed + ")");

	//save the character's position and ask them how many they want to make
	var craftingbag := FindCraftingBag (character);
	var characterx := character.x;
	var charactery := character.y;
	var amax := Cint (material.amount/material_needed);
	if (!amax)
		SendSysMessage (character, "You don't have enough material to make that!");
		return;
	elseif (amax > 10)
		amax := 10;
	endif
	var items_to_make := Cint (Sendtextentrygump (character, "How many do you want to make?:", 
				TE_CANCEL_DISABLE, TE_STYLE_NORMAL, 10, "(Max: " + amax + ", 0 to cancel)"));
	if (!items_to_make)
		SendSysMessage (character, "Canceled.");
		return;
	endif

	//save the character's position and ask them if they want to autoloop
	var found_material, autoupgrade := 0;
	if (selection.hasquality)
		autoupgrade := 1;
		SendSysmessage (character, "Target the ingots to use to upgrade:");
		SendSysmessage (character, "(Press Esc. key to create item but not upgrade it)");
		found_material := Target (character);
		if (!found_material)
			autoupgrade := 0;
		else
			if (!IsIngot (found_material.objtype) )
				SendSysMessage (character, "That's not an ingot!");
				return;
			endif
			if (!ReserveItem (found_material) )
				SendSysMessage (character, "You cannot use that right now.");
				return;
			endif
			if (!Accessible (character, found_material) )
				SendSysMessage (character, "You can't reach that.");
				return;
			endif
			if (found_material.amount < material_needed)
				SendSysMessage (character, "You need " + material_needed + " ingots.  That's only " + found_material.amount + "!");
				return;
			endif
		endif
	endif

	var created_item;
	repeat
		created_item := 0;
		for i := 1 to time_delay
			PlaySoundEffect (character, SFX_ANVIL);
			sleep (2);
		endfor
		PlaySoundEffect (character, SFX_ANVIL);

		if (!CheckSkill (character, SKILLID_BLACKSMITHY, item_skill, 0))
			var lossamount := RandomInt (Cint ( material_needed/3) )+1;
			SubtractAmount (material, lossamount);
			SendSysmessage (character, "You fail, destroying some ingots.");
		else
			// Added to check amount every time before creating item
			var amax := Cint (material.amount/material_needed);
			if (!amax)
				SendSysMessage (character, "You ran out of materials!");
				return;
			elseif (amax > 10)
				amax := 10;
			endif

			created_item := CreateItemInContainer( craftingbag, chosen_item, amount := 1 );
			//created_item := CreateItemInContainer (craftingbag, chosen_item, 1);
			if (!created_item)
				PrintTextAbovePrivate (character, "*Your backpack is full!*", character);
				return;
			endif

			SendSysMessage (character, "You place the item in your backpack.");

			//set the color
			if (material.color)
				created_item.color := material.color;
			endif
			SubtractAmount (material, material_needed);

			//created_item.buyprice := 0;
			
			if (autoupgrade)
				var upgrade_material := Cint (material_needed/2);
				if (found_material.amount < upgrade_material)
					SendSysMessage (character, "You don't have enough material to upgrade that item!");
					return;
				endif
				
				var upgrade_skill := item_skill + 15;
				if (upgrade_skill > 110)
					upgrade_skill := 110;
				endif
				if (upgrade_skill >= GetAttribute (character, ATTRIBUTEID_BLACKSMITHY) + 20)
					SendSysMessage (character, "Your skill is too low to upgrade that item.");
					return;
				endif
				
				var upgrade_timedelay := time_delay - 1;
				if (!upgrade_timedelay or upgrade_timedelay < 0)
					upgrade_timedelay := 1;
				endif

				if (characterx != character.x or charactery != character.y)
					SendSysMessage (character, "You stop smithing.");
					return;
				endif

				PerformBlacksmithyItemUpgrade (character, created_item, found_material, upgrade_material,
						SKILLID_BLACKSMITHY, upgrade_skill, upgrade_timedelay, item_name);
			endif
		endif
		
		if (characterx != character.x or charactery != character.y)
			SendSysMessage (character, "You stop smithing.");
			return;
		endif
		
		if (created_item)
			randommagicitem(character, created_item);
			items_to_make := items_to_make - 1;
		endif
		sleep (2);
	until (!items_to_make);
	SendSysMessage (character, "You stop smithing.");
endfunction


function randommagicitem(character, item)

	// First check to see if character meets requirements : to make magic is a special .spec setup not everyone can do it.

	var blacksmithySkill := GetAttributeBaseValue( character, "Blacksmithy" )/10;
	var magerySkill := GetAttributeBaseValue( character, "magery")/10;
	var meditationSkill := GetAttributeBaseValue( character, "Meditation")/10;

	var mastermage := 1;
	var neededskill := "none";

	// This is 100 or better skills
	if ( blacksmithySkill < 100 )
		if ( neededskill == "none" )
			neededskill := "blacksmithy";
		endif
		mastermage := 0;
	endif

	if ( magerySkill < 100 )
		if ( neededskill == "none" )
			neededskill := "magery";
		endif
		mastermage := 0;
	endif

	if ( meditationSkill < 100 )
		if ( neededskill == "none" )
			neededskill := "meditation";
		endif
		mastermage := 0;
	endif

	if ( mastermage == 0 )
		PrintTextAbove( character, "*thinks about " + neededskill + "*",
			        font := _DEFAULT_TEXT_FONT, color := _DEFAULT_TEXT_COLOR, journal_print := JOURNAL_PRINT_NAME);
	endif

	if ( mastermage == 1 )
		// ok now we can try to make a magic quality item
		var results := RandomDiceRoll("d100");
		// 2% magic item possiblilty
		if ( results > 98 )
			var param := {};
			param[1] := item;
			Run_Script( ":loot:makeitemmagic", param );
		endif
	endif

endfunction

///////////////////
//  Determines the minimum skill for working with a particular metal
///////////////////

function CheckSkillForDifferentMetals (byref character, byref ingot)

	var character_skill := GetAttribute (character, ATTRIBUTEID_BLACKSMITHY);

	case ( ingot )
		UOBJ_IRON_INGOT:
			return 1;   //anyone can work with iron
		UOBJ_BRONZE_INGOT:
			if (character_skill > 60)
				return 1;
			endif
		UOBJ_DULLCOPPER_INGOT:
			if (character_skill > 70)
				return 1;
			endif
		UOBJ_COPPER_INGOT:
			if (character_skill > 80)
				return 1;
			endif
		UOBJ_ONYX_INGOT:
			if (character_skill > 85)
				return 1;
			endif
 		UOBJ_PYRITE_INGOT:
			if (character_skill > 90)
				return 1;
			endif
		UOBJ_MALACHITE_INGOT:
			if (character_skill > 95)
				return 1;
			endif
 		UOBJ_AZURITE_INGOT:
			if (character_skill > 98)
				return 1;
			endif
		UOBJ_BLUESTEEL_INGOT:
			if (character_skill > 98)
				return 1;
			endif
		UOBJ_RUBYSTEEL_INGOT:
			if (character_skill > 98)
				return 1;
			endif
	endcase
	return 0;
endfunction




///////////////////
//  Searches the area around the character for an anvil
///////////////////

function SearchForAnvilInArea (byref character)
	foreach item in ListItemsNearLocation (character.x, character.y, character.z, 2)
		if ((item.objtype == UOBJ_ANVIL1) or (item.objtype == UOBJ_ANVIL2))
			return 1;
		endif
	endforeach

	return 0;
endfunction
