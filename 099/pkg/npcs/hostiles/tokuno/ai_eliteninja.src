use os;
use uo;
use npc;
use util;
use cfgfile;

include "../pkg/npcs/main_ai/setup/setup";
include "../pkg/npcs/main_ai/main/mainloop_killpcs_normal";
include "../pkg/npcs/main_ai/main/sleepmode_normal";
include "../pkg/npcs/main_ai/combat/fightmode_normal_default";
include "../pkg/npcs/main_ai/combat/closedistance_archer";
include "../pkg/npcs/main_ai/combat/changeopponent_default";
include "../pkg/npcs/main_ai/combat/gethelp_default";

const HALT_THRESHOLD := 8; // how close before he attacks?
drop_anchor();

program KillPlayers ()
	if (!me.backpack)
		DoOnCreationSetup ();
		sleep (1);
		foreach item in ListEquippedItems (me)
			if (item.objtype != UOBJ_MOUNT)
				if (item.isa (POLCLASS_WEAPON))
					item.dmg_mod := 3;
					item.quality := 1.2;
					item.hp := item.maxhp;
					item.newbie := 1;
				endif
			endif
		endforeach
	endif
	DoStartupSetup ();

	if (GetObjProperty (me, "frozen"))
		me.frozen := 1;
	endif

	post_combat ();
	main_AI_loop ();
endprogram


function process_combat_event (byref ev)
	if (ev.type == EVID_DAMAGED)
		if (GetVital (me, "Life") < CINT (GetVitalMaximumValue (me, "Life")*0.75))
			ApplyHealing ();
		endif
	endif
endfunction


function in_combat_event_loop (byref opponent)
	if (opponent)
	endif
endfunction

function post_combat ()
	ClearEventQueue ();
	DisableCombatEvents ();
	EnableMainEvents ();

	SetWarMode (0);
	sleep (1);
	look_around ();
endfunction

function prepare_for_fight (byref opponent)
	if (opponent)
	endif
	ClearEventQueue ();
	DisableMainEvents();
	EnableCombatEvents();
endfunction


function ThrowNinjaStar (opponent)
	if (!CheckLoSAt (me, opponent.x, opponent.y, opponent.z))
		return;
	endif
	
	if (GetObjProperty (me, "#throw_ninja_star"))
		var throw_ninja_star := GetObjProperty (me, "#throw_ninja_star");
		if (throw_ninja_star > ReadGameClock())
			return 0;
		endif
	endif
	
	sleep (1);
	PrintTextAbove (me, "*throws ninja stars*");
	PlayMovingEffect (me, opponent, 0x1053, 0xa, 0x1e);
	sleep (1);
	DoDamageByType (me, opponent, RandomDiceRoll ("4d6+6"), DAMAGETYPE_PHYSICAL);

	SetObjProperty (me, "#throw_ninja_star", ReadGameClock() + 3);

endfunction



