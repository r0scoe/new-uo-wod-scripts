use uo;
use os;
use util;
use cfgfile;

include ":crafting:crafting";
include "include/attributes";
include "include/objtype";
include "include/crafting";
include "include/gumps";
include "include/utility";
include "include/magicitems";

var item_config := ReadConfigFile( ":*:itemdesc" );
var craft_config := ReadConfigFile( ":blacksmithy:blacksmithy" );

program use_hammer (who, tool)

	if (!ReserveItem (tool) )
		SendSysMessage (who, "You cannot use that right now.");
		return;
	endif

	if (!SearchForAnvilInArea (who) )
		SendSysmessage (who, "You must be near an anvil to do anything.");
		return;
	endif
	var rinfo := sendCraftGump( who, ATTRIBUTEID_BLACKSMITHY );
	if( rinfo == 0 )
		return 0;
	endif

	if (!SearchForAnvilInArea (who) )
		SendSysmessage (who, "You must be near an anvil to do anything.");
		return;
	endif
	var the_objtype := rinfo[1],
	    amt := rinfo[2],
	    repair := rinfo[3],
	    resmelt := rinfo[4],
	    fortify := rinfo[5];
     
	if( repair )
                RepairItem( who, SKILLID_BLACKSMITHY );
	elseif (fortify)
		UpgradeItem (who, SKILLID_BLACKSMITHY);
	elseif (resmelt)
		return 0;
	else
		makeBlacksmithyItem( who, tool, the_objtype, amt );
	endif

	return 1;
endprogram

function makeBlacksmithyItem (who, tool, chosen_item, amt)
	if (tool)
	endif
	if( !chosen_item || !amt )
		SendSysMessage( who, "Cancelled." );
		return 0;
	endif

	var items_to_make := amt;
	if (items_to_make == 0)
		return 0;
	endif

	var skill_elem := menu_config[craft_skill];
	//find the item in tailoring.cfg file
	var selection := FindConfigElem (craft_config, chosen_item);
	if (!selection)
		SendSysMessage (who, "That was an invalid selection");
		return;
	endif

	var material_needed := cint (selection.material);
	var material_type := selection.type;
	var item_skill := cint (selection.skill);
	var time_delay := cint (selection.time);
	var item_stackable := selection.stackable;
	var item_name := selection.name;
	SendSysMessage(who, "(Skill: " + item_skill + ", " + material_type + ": " + material_needed + ")");

	var chosen_material := MaterialSelection( who, craft_skill, material_type );
	if (!chosen_material)
		return 0;
	endif

	var craftingbag := FindCraftingBag (who);
	var whox := who.x;
	var whoy := who.y;
	var amax := CINT (chosen_material.amount/material_needed);
	if (!amax)
		SendSysMessage (who, "You don't have enough " + material_type + " to make that!");
		return;
	elseif (amax > 10)
		amax := 10;
	endif

	//save the who's position and ask them if they want to autoloop
	var autoupgrade := 0;;
	if (selection.Exceptional)
		autoupgrade := quality;
	endif

	var created_item;
	repeat
		created_item := 0;
		if (chosen_material.amount < material_needed or !chosen_material)
			SendSysmessage (who, "You don't have enough " + material_type + " to continue!");
			break;
		endif

		for i := 1 to time_delay
			PlaySoundEffect (who, SFX_ANVIL);
			sleep (2);
		endfor
		PlaySoundEffect (who, SFX_ANVIL);

		if (!CheckSkill (who, SKILLID_BLACKSMITHY, item_skill, 0))
			var lossamount := RandomInt (CINT ( material_needed/3) )+1;
			SubtractAmount (chosen_material, lossamount);
			SendSysmessage (who, "You fail, destroying some " + material_type + ".");
		else
			created_item := CreateItemInContainer (craftingbag, chosen_item, 1);
			if (!created_item)
				PrintTextAbovePrivate (who, "*Your backpack is full!*", who);
				break;
			endif

			created_item.movable := 1;
			created_item.buyprice := 0;
			SendSysMessage (who, "You place the item in your backpack.");
			//set the color
			if (selection.retain and chosen_material.color)
				created_item.color := chosen_material.color;
			endif
			if (!item_stackable)
				SetObjProperty (created_item, "material_objtype", chosen_material.objtype);
			endif
			SubtractAmount (chosen_material, material_needed);
			if (selection.mark)
				created_item.name := item_name + " [crafted by " + who.name + "]";
			endif
			created_item.hp := created_item.maxhp;

			if (autoupgrade)
				var upgrade_material := CINT (material_needed/2);
				if (chosen_material.amount < upgrade_material)
					SendSysMessage (who, "You don't have enough chosen_material to upgrade that item!");
					break;
				endif
				
				var upgrade_skill := item_skill + 15;
				if (upgrade_skill > 110)
					upgrade_skill := 110;
				endif
				if (upgrade_skill >= GetAttribute (who, ATTRIBUTEID_BLACKSMITHY) + 20)
					SendSysMessage (who, "Your skill is too low to upgrade that item.");
					break;
				endif

				if (whox != who.x or whoy != who.y)
					break;
				endif

				PerformItemUpgrade (who, created_item, chosen_material, upgrade_material,
						SKILLID_BLACKSMITHY, upgrade_skill, item_name, autoupgrade);
			endif
		endif
		
		if (whox != who.x or whoy != who.y)
			break;
		endif
		
		if (created_item)
			items_to_make := items_to_make - 1;
		endif
		sleep (2);

	until (!items_to_make);

        SendSysMessage( who, "You stop "+skill_elem.EndMessage+"...", 3, 89 );

	return 1;
endfunction

///////////////////
//  Searches the area around the character for an anvil
///////////////////

function SearchForAnvilInArea (byref character)
	foreach item in ListItemsNearLocation (character.x, character.y, character.z, 2, character.realm)
		//if ((item.objtype == UOBJ_ANVIL1) or (item.objtype == UOBJ_ANVIL2))
		//	return 1;
		//endif
		case (item.objtype)
			UOBJ_ANVIL1:
			UOBJ_ANVIL2:
			UOBJ_ELVEN_ANVIL1:
			UOBJ_ELVEN_ANVIL2:
			UOBJ_SOULFORGE_ANVIL1:
			UOBJ_SOULFORGE_ANVIL2:
			UOBJ_SOULFORGE_ANVIL3:
			UOBJ_SOULFORGE_ANVIL4:
			UOBJ_SOULFORGE_ANVIL5:
			UOBJ_SOULFORGE_ANVIL6:
			UOBJ_SOULFORGE_ANVIL7:
			UOBJ_SOULFORGE_ANVIL8:
			UOBJ_SOULFORGE_ANVIL9:
			UOBJ_SOULFORGE_ANVIL10:
			UOBJ_SOULFORGE_ANVIL11:
			UOBJ_SOULFORGE_ANVIL12:
				return 1;
		endcase
	endforeach
	foreach item in ListStaticsNearLocation (character.x, character.y, character.z, 2, ITEMS_IGNORE_MULTIS, character.realm)
//		if ((item.objtype == UOBJ_ANVIL1) or (item.objtype == UOBJ_ANVIL2))
//			return 1;
//		endif
		case (item.objtype)
			UOBJ_ANVIL1:
			UOBJ_ANVIL2:
			UOBJ_ELVEN_ANVIL1:
			UOBJ_ELVEN_ANVIL2:
				return 1;
		endcase
	endforeach
	return 0;
endfunction

///////////////////
//  checks what special options are available for upgrading a blacksmithy item
///////////////////

function DoSpecialUpgradeStuff (byref character, byref item, repair_skill)
	//nothing we can do with player made items at the highest upgrade level
	if (item.desc["exceptional"] or item.desc["Exceptional"])
		SendSysMessage (character, "That item can't be upgraded further.");
		return;
	endif

	//if its a magic item and they're using blacksmithy, they can change the color of the item, or
	//if its a breastplate, they can change its gender
	if (IsMagicalItem (item))
		if (repair_skill != SKILLID_BLACKSMITHY)
			SendSysMessage (character, "That item can't be upgraded further.");
			return;
		endif

		if (item.graphic == UOBJ_PLATE_BREASTPLATE or item.graphic == UOBJ_PLATE_BREASTPLATE2 or
				item.graphic == UOBJ_PLATE_FEMALE or item.graphic == UOBJ_PLATE_FEMALE2)
			var menu := CreateMenu ("Options:");
			AddMenuItem (menu, 0, "Laminate");
			AddMenuItem (menu, 0, "Change gender");

			var selection := SelectMenuItem2 (character, menu);
			if (!selection)
				SendSysMessage (character, "Canceled.");
				return;
			elseif (selection.index == 1)
				DoColorCoating (character, item, repair_skill);
				return;
			elseif (selection.index == 2)
				ChangeGenderOfMetalArmor (character, item, repair_skill);
				return;
			else
				SendSysMessage (character, "You're not supposed to get this message.  Whoops.");
				return;
			endif
			return;
		else
			DoColorCoating (character, item, repair_skill);
			return;
		endif

	//otherwise try to upgrade it
	else
		DoItemUpgrade (character, item, repair_skill);
		return;
	endif
endfunction

///////////////////
//  allows the user to coat the given piece of equipment with another color
///////////////////

function DoColorCoating (byref character, byref item, repair_skill)
	var smith_cfg_file := ReadConfigFile( ":blacksmithy:blacksmithy" );
	var elem := FindConfigElem (smith_cfg_file, item.graphic);
	if (!elem)
		if (item.objtype == UOBJ_CHAINMAIL_GLOVES or item.objtype == UOBJ_RINGMAIL_COIF)
			elem := FindConfigElem (smith_cfg_file, item.objtype);
		endif
		if (!elem)
			SendSysMessage (character, "That item can't be laminated.");
			return;
		endif
	endif

	var material_needed := cint (elem.material/2);
	var time_delay := elem.time;
	if (time_delay > 1)
		time_delay := time_delay - 1;
	endif;

	SendSysMessage (character, "Laminating that item will take " + material_needed + " ingots and 90 skill.");
	if (GetAttribute (character, GetAttributeIDBySkillID (repair_skill)) < 90)
		SendSysMessage (character, "Your skill is too low to laminate that item.");
		return;
	endif

	SendSysmessage (character, "Target some ingots to laminate the item with.");
	var found_ingots := Target (character);
	if (!found_ingots)
		SendSysMessage (character, "Canceled.");
		return;
	endif
	if (!ReserveItem (found_ingots) )
		SendSysMessage (character, "You cannot use that right now.");
		return;
	endif
	if (!IsIngot (found_ingots.objtype) )
		SendSysMessage (character, "That's not an ingot!");
		return;
	endif
	if (!Accessible (character, found_ingots) )
		SendSysMessage (character, "You can't reach that.");
		return;
	endif
	if (found_ingots.amount < material_needed)
		SendSysMessage (character, "You need " + material_needed + " ingots.  That's only " + found_ingots.amount + "!");
		return;
	endif

	var confirm_upgrade := YesNo (character, "Laminate?");
	if (!confirm_upgrade)
		SendSysMessage (character, "Canceled.");
		return;
	endif

	for i := 1 to time_delay
		PlaySoundEffect(character, SFX_ANVIL);
		sleep (2);
	endfor
	PlaySoundEffect(character, SFX_ANVIL);

	if (RandomInt (1000) == 0)
		if (!elem.laminate_nodestroy)
			SendSysMessage (character, "You fail, destroying the item.");
			DestroyItem (item);
		else
			SendSysMessage (character, "You fail, destroying some ingots.");
			SubtractAmount (found_ingots, RandomInt (material_needed) );
		endif
		return;
	elseif ( RandomInt (100) < 10 )
		SendSysMessage (character, "You fail, destroying some ingots.");
		SubtractAmount (found_ingots, RandomInt (material_needed) );
		return;
	else
		SendSysMessage (character, "You succeed in laminating the item.");
		item.color := found_ingots.color;
		SubtractAmount (found_ingots, material_needed);
		return;
	endif

endfunction




///////////////////
//  changes the gender of plate armor from male to female and back again
///////////////////

function ChangeGenderOfMetalArmor (byref character, byref item, repair_skill)
	var smith_cfg_file := ReadConfigFile( ":blacksmithy:blacksmithy" );
	var elem := FindConfigElem (smith_cfg_file, item.graphic);
	if (!elem)
		SendSysMessage (character, "That item is in full repair.");
		return;
	endif

	var material_needed := cint (elem.material/2);
	var time_delay := elem.time;
	if (time_delay > 1)
		time_delay := time_delay - 1;
	endif;

	SendSysMessage (character, "That item is in full repair.");
	SendSysMessage (character, "Changing the gender of that item will take " + material_needed + " ingots and 90 skill.");
	if (GetAttribute (character, GetAttributeIDBySkillID (repair_skill)) < 90)
		SendSysMessage (character, "Your skill is too low to do this.");
		return;
	endif

	SendSysmessage (character, "Target the ingots to use:");
	var found_ingots := Target (character);
	if (!found_ingots)
		SendSysMessage (character, "Canceled.");
		return;
	endif
	if (!IsIngot (found_ingots.objtype) )
		SendSysMessage (character, "That's not an ingot!");
		return;
	endif
	if (!ReserveItem (found_ingots) )
		SendSysMessage (character, "You cannot use that right now.");
		return;
	endif
	if (!Accessible (character, found_ingots) )
		SendSysMessage (character, "You can't reach that.");
		return;
	endif
	if (found_ingots.amount < material_needed)
		SendSysMessage (character, "You need " + material_needed + " ingots.  That's only " + found_ingots.amount + "!");
		return;
	endif

	var confirm_upgrade := YesNo (character, "Change gender?");
	if (!confirm_upgrade)
		SendSysMessage (character, "Canceled.");
		return;
	endif

	for i := 1 to time_delay
		PlaySoundEffect (character, SFX_ANVIL);
		sleep (2);
	endfor
	PlaySoundEffect(character, SFX_ANVIL);

	if (RandomInt (1000) == 0)
		SendSysMessage (character, "You fail, destroying the item.");
		DestroyItem (item);
		return;
	elseif ( RandomInt (100) < 10 )
		SendSysMessage (character, "You fail, destroying some ingots.");
		SubtractAmount (found_ingots, RandomInt (material_needed) );
		return;
	else
		SendSysMessage (character, "You succeed in modifying the item.");
		case (item.graphic)
			UOBJ_PLATE_BREASTPLATE:
				item.graphic := UOBJ_PLATE_FEMALE;
			UOBJ_PLATE_BREASTPLATE2:
				item.graphic := UOBJ_PLATE_FEMALE2;
			UOBJ_PLATE_FEMALE:
				item.graphic := UOBJ_PLATE_BREASTPLATE;
			UOBJ_PLATE_FEMALE2:
				item.graphic := UOBJ_PLATE_BREASTPLATE2;
			default:
				SendSysMessage (character, "Um, never mind.  I was thinking of a different type of item, I guess.");
				return;
		endcase
		SubtractAmount (found_ingots, material_needed);
		return;
	endif

endfunction



