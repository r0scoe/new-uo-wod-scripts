use os;
use uo;
use npc;
use util;
use cfgfile;

include "../pkg/npcs/main_ai/setup/setup";
include "../pkg/npcs/main_ai/main/mainloop_killpcs_normal";
include "../pkg/npcs/main_ai/main/sleepmode_normal";
include "../pkg/npcs/main_ai/combat/fightmode_smart";
include "../pkg/npcs/main_ai/combat/changeopponent_smart";
include "../pkg/npcs/main_ai/combat/closedistance_default";
include "../pkg/npcs/main_ai/combat/gethelp_default";

const HALT_THRESHOLD := 8; // how close before he attacks?
drop_anchor();

program KillPlayers ()
	if (!me.backpack)
		DoOnCreationSetup ();
		sleep (1);
		foreach item in ListEquippedItems (me)
			if (RandomInt (3) and item.objtype != UOBJ_MOUNT)
				item.newbie := 1;
			endif
		endforeach
	endif
	DoStartupSetup ();

	if (GetObjProperty (me, "frozen"))
		me.frozen := 1;
	endif

	post_combat ();
	main_AI_loop ();
endprogram


function process_combat_event (byref ev)
	if (ev.type == EVID_DAMAGED)
		if (GetVital (me, "Life") < CINT (GetVitalMaximumValue (me, "Life")*0.75))
			ApplyHealing ();
		endif
		if (GetVital (me, "Life") < CINT (GetVitalMaximumValue (me, "Life")/10))
			EraseObjProperty (me, "#flees");
			Flee (ev.source);
		endif
	endif
endfunction


function in_combat_event_loop (byref opponent)
	if (opponent)
	endif
endfunction

function post_combat()
	DisableCombatEvents ();
	EnableMainEvents ();
	SetWarMode ( 0 );
	sleep (1);
	look_around();
endfunction

function prepare_for_fight (byref opponent)
	if (opponent)
	endif
	DisableMainEvents();
	EnableCombatEvents();
endfunction
