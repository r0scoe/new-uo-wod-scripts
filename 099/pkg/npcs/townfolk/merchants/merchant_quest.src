use uo;
use os;
use util;
use cfgfile;

include "include/client";
include "include/objtype";
include "include/eventid";
include "include/locations";
include "include/gumps";
include "../pkg/npcs/npcinfo";
include "../pkg/character/virtue/virtue";

Const MERCHANT_QUEST_ERASE_TIMER		:= 1800;

program merchant_training (parms)
	var merchant := parms [1];
	var player := parms [2];

	//if there's a 3rd parameter, that's the package that got delivered, so pay for it
	if (parms[3])
		PayForItemDelivery (merchant, player, parms[3]);
		return;
	endif

	if (GetObjProperty (player, "#merchantquestthing"))
		if (GetProcess (GetObjProperty (player, "#merchantquestthing")))
			return;
		endif
	endif
	SetObjProperty (player, "#merchantquestthing", GetPid ());
	
	var questtimer := GetObjProperty (merchant, "#questtimer");
	if (!questtimer)
		questtimer := 0;
	endif
	if (questtimer + MERCHANT_QUEST_ERASE_TIMER > ReadGameClock())
		PrintTextAbovePrivate(merchant, "I don't have anything I need delivered right now, I'm afraid", player);
		EraseObjProperty (player, "#merchantquestthing");
		return;
	endif

	SetObjProperty (merchant, "#questtimer", ReadGameClock());
	
	var mytown := FindMyTown (merchant);
	var chosentown := mytown;
	if (!chosentown or RandomInt (4) == 1)
		chosentown := RandomInt (15) + 1;
	endif

	var townmerchantarray := GetGlobalProperty ("#merchants_of_town_" + chosentown);
	if (!townmerchantarray)
		PrintTextAbovePrivate(merchant, "Well, I could...  Hmm...  No, never mind.  Come back later.", player);
		EraseObjProperty (player, "#merchantquestthing");
		return;
	endif
	
	var chosenmerchant, tries := 0;
	var total_merchants := len (townmerchantarray);
	repeat
		tries := tries + 1;
		var chosenmerchantserial := townmerchantarray [RandomInt (total_merchants + 1)];
		chosenmerchant := SystemFindObjectBySerial (chosenmerchantserial);
	until (chosenmerchant or tries > 10);
	
	if (!chosenmerchant or chosenmerchant == merchant)
		PrintTextAbovePrivate(merchant, "I have some stuff I need delivered, but I don't think they're in.", player);
		EraseObjProperty (player, "#merchantquestthing");
		return;
	endif

	var merchantname := chosenmerchant.name;
	var merchanttown := GetNameOfTown (chosentown);

	PrintTextAbovePrivate(merchant, "I have some stuff I need delivered to " + merchantname + " in " + merchanttown + ".", player);
	sleep (1);
	PrintTextAbovePrivate(merchant, "Are you willing to help me out?", player);
	if (!TimedYesNo (player, "Accept?", 20) )
		PrintTextAbovePrivate (merchant, "Ok.  Maybe next time.", player);
		EraseObjProperty (player, "#merchantquestthing");
		return;
	endif
	
	var thepackage := CreateItemInContainer (player.backpack, 0x706c, 1);
	if (!thepackage)
		PrintTextAbovePrivate (merchant, "It looks like your backpack is full.  Maybe later.", player);
		EraseObjProperty (player, "#merchantquestthing");
		return;
	endif
	
	thepackage.graphic := 3644;
	thepackage.name := "A package for " + merchantname + " in " + merchanttown;
	thepackage.sellsfor := 0;
	thepackage.buysfor := 0;
	thepackage.movable := 1;
	SetObjProperty (thepackage, "deliverto", chosenmerchant.serial);
	SetObjProperty (thepackage, "delivertoname", chosenmerchant.name);
	SetObjProperty (thepackage, "sentfrom", merchant.serial);
	SetObjProperty (thepackage, "sentfromname", merchant.name);
	SetObjProperty (thepackage, "fromtown", mytown);

	PrintTextAbovePrivate (merchant, "Ok.  They'll pay you for it when you get there.", player);
	EraseObjProperty (player, "#merchantquestthing");
endprogram




///////////////////
//  called when someone does a quest for the merchant
///////////////////

function PayForItemDelivery (merchant, player, thepackage)
	if (GetObjProperty (thepackage, "deliverto") != merchant.serial)
		PrintTextAbovePrivate (merchant, "I didn't ask for that.", player);
		return;
	endif
	
	PrintTextAbovePrivate (merchant, "Oh, this must be from " + GetObjProperty (thepackage, "sentfromname") + ".  Thank you, and here you go.", player);
	var goldamount := RandomDiceRoll ("3d75+100");

	var mytown := FindMyTown (merchant);
	if (mytown)
		if (GetObjProperty (thepackage, "fromtown"))
			if (mytown != GetObjProperty (thepackage, "fromtown"))
				goldamount := goldamount * 2;
			endif
		endif
	endif
	
	CreateItemInContainer (player.backpack, UOBJ_GOLD_COIN, goldamount);
	PlaySoundEffect (player, 0x38);
	SendSysMessage (player, "You gained " + goldamount + " gold.");
	DestroyItem (thepackage);
	AddVirtue (player, 1);
	
	//Give them a chance at a stat increase
	var maxstr := GetObjProperty (player, "maxstr");
	var maxdex := GetObjProperty (player, "maxdex");
	var maxint := GetObjProperty (player, "maxint");
	var unmod_str := CINT (GetAttributeBaseValue (player, "Strength")/10);
	var unmod_dex := CINT (GetAttributeBaseValue (player, "Dexterity")/10);
	var unmod_int := CINT (GetAttributeBaseValue (player, "Intelligence")/10);

	if (!maxstr)
		SendSysMessage (player, "Remember to choose your specializations.");
	endif

	if (unmod_str < 30 and RandomInt (2) and unmod_str < maxstr)
		SetAttributeBaseValue (player, "Strength", unmod_str*10 + 10);
	elseif ( (unmod_str < maxstr) and (RandomInt(3)==1) )
		if ( (RandomInt(90)+1 ) > unmod_str)
			SetAttributeBaseValue (player, "Strength", unmod_str*10 + 10);
			RecalcVitals (player);
		endif
	endif

	if (unmod_dex < 30 and RandomInt (2) and unmod_dex < maxdex)
		SetAttributeBaseValue (player, "Dexterity", unmod_dex*10 + 10);
	elseif ( (unmod_dex < maxdex) and (RandomInt(3)==1) )
		if ( (RandomInt(90)+1 ) > unmod_dex)
			SetAttributeBaseValue (player, "Dexterity", unmod_dex*10 + 10);
			RecalcVitals (player);
		endif
	endif

	if (unmod_int < 30 and RandomInt (2) and unmod_int < maxint)
		SetAttributeBaseValue (player, "Intelligence", unmod_int*10 + 10);
	elseif ( (unmod_int < maxint) and (RandomInt(3)==1) )
		if ( (RandomInt(90)+1 ) > unmod_int)
			SetAttributeBaseValue (player, "Intelligence", unmod_int*10 + 10);
			RecalcVitals (player);
	  	endif
	endif
	
endfunction

