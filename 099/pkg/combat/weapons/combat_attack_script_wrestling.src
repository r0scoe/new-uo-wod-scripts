use uo;
use os;
use util;
use cfgfile;

include "../pkg/combat/weapons/combat_attack_script";
include "include/newperformaction";

var attacker, defender;
var armorcfgfile := ReadConfigFile (":armor:itemdesc");
var attacker_npcdesc_elem, defender_npcdesc_elem;
var attacker_weapon, defender_armor;

program combat_attack_script (parms)
	attacker := parms [1];
	defender := parms [2];
	if (!attacker or !defender)
		SendSysMessage (attacker, "No defender!");
		SendSysMessage (defender, "No attacker!");
		return 0;
	endif

	if (attacker.z > (defender.z + 20) or attacker.z < (defender.z - 20))
		return 1;
	endif
	if (Distance (attacker, defender) > 20)
		return 1;
	endif

	//Make sure that these files exist
	if (!armorcfgfile)
		SendSysMessage (attacker, "Unable to load itemdesc.cfg file(s)!");
		SendSysMessage (defender, "Unable to load itemdesc.cfg file(s)!");
		SendSysMessage (attacker, "Please notify a GM so that this problem can be fixed.");
		SendSysMessage (defender, "Please notify a GM so that this problem can be fixed.");
		return 0;
	endif

	//Load the NPCdesc elems for any parties to this combat that are NPCs
	if (attacker.npctemplate)
		attacker_npcdesc_elem := GetNpcTemplateElem (attacker.npctemplate);
	endif
	if (defender.npctemplate)
		defender_npcdesc_elem := GetNpcTemplateElem (defender.npctemplate);
	endif

	//Load the itemdesc entries for the attacker's weapon, if they have one
	attacker_weapon := attacker.weapon;

	//Properly credit the attacker for anything that happens, but not in the arena
	if (attacker.x >= 1385 and attacker.x <= 1414 and attacker.y >= 3729 and attacker.y <= 3758)
		SetScriptController (0);
	else
		SetScriptController (attacker);
	endif

	//perform the attack animation.
	PerformAttackAnimation ();

	//Calc chance to hit and check for success
	var chance_to_hit := CalculateToHitChance ();
	if (RandomInt (100) > chance_to_hit)
		PlayMissSoundEffect ();
		return 1;
	endif
	
	//Hit! Figure out how much raw damage the attack did, then modify it be tactics and strength
	var raw_damage := CalculateAttackDamage ();
	var modified_damage := CINT ((raw_damage * (GetAttribute (attacker, ATTRIBUTEID_TACTICS) + 50 + CINT (GetAttribute (attacker, ATTRIBUTEID_STRENGTH)/5)))/100);

	//Get the defender's AR rating and reduce the damage by 50-100% of that value
//	var defender_ar := CINT (GetDefendersAR (defender)/2);
	var defender_ar := CINT (GetDefendersAR (defender));
	if (defender_ar > 0)
//		modified_damage := modified_damage - RandomInt (defender_ar) - defender_ar - 1;
		modified_damage := CINT (modified_damage*(100 - defender_ar)/100);
	endif

	//Always do at least 1 damage
	if (modified_damage < 1)
		modified_damage := 1;
	endif

	//Now check parry, if the defender has a shield
	var shield := GetEquipmentByLayer (defender, LAYER_HAND2);
	if (shield and IsShield (shield))
		var defender_parry_skill := GetAttribute (defender, ATTRIBUTEID_PARRY);
		if (RandomInt (300) < defender_parry_skill)
			//Successful parry, reduce damage
			modified_damage := modified_damage - shield.ar;
			SendSysMessage (defender, "You parry the attack!");
			QuickAwardRawAttributePoints (defender, ATTRIBUTEID_PARRY, 30);
			NewPerformAction(defender, 1+RandomInt(2), 0, 0);
			PlaySoundEffect (defender, 0x143);

			//Do some damage to the shield
			if (shield.hp or shield.hp == 0)
				if (RandomInt (100) == 1)
					if (DoDamageToEquipment (shield, 1))
						SendSysMessage (defender, "Your shield breaks!");
						DestroyItem (shield);
					endif
				endif
			endif

			//if no damage left, quit now
			if (modified_damage <= 0)
				return 1;
			endif
		else	//On unsuccesfull parry, play hit sound effect
			PlayHitSoundEffect ();
		endif
	else	//On unsuccesfull parry, play hit sound effect
		PlayHitSoundEffect ();
	endif

	//Players take 1/2 damage
//	if (defender.acctname or defender.npctemplate == ":guards:warrior")
//		modified_damage := CINT (modified_damage/2);
//	endif
	
	//Combat advancement for weapon skills
	QuickAwardRawAttributePoints (attacker, ATTRIBUTEID_WRESTLING, 30);
	QuickAwardRawAttributePoints (attacker, ATTRIBUTEID_TACTICS, 15);
	QuickAwardRawAttributePoints (defender, ATTRIBUTEID_TACTICS, 15);

	//fake hitscript stuff
	if (GetObjProperty (defender, "#reactive_armor"))
		if (Distance (attacker, defender) <= 1)
			var evalintskill := GetAttribute (defender, ATTRIBUTEID_INVOCATION);
			var reactive_damage := CINT ( (evalintskill*modified_damage)/200);
			PlaySoundEffect (attacker, SFX_SPELL_EXPLOSION);
			PlayObjectCenteredEffect (attacker, FX_EXPLODE_3, 7, 0x10);
			DoDamageByType (defender, attacker, reactive_damage, DAMAGETYPE_MAGIC);
			EraseObjProperty (defender, "#reactive_armor");
		endif
	elseif (GetObjProperty (defender, "special_reactive_armor") and RandomInt (2))
		if (Distance (attacker, defender) <= 1)
			var reactive_damage := CINT (modified_damage/2);
			PlaySoundEffect (attacker, SFX_SPELL_EXPLOSION);
			PlayObjectCenteredEffect (attacker, FX_EXPLODE_3, 7, 0x10);
			DoDamageByType (defender, attacker, reactive_damage, DAMAGETYPE_MAGIC);
		endif
	endif

	DoDamageByType (attacker, defender, modified_damage, DAMAGETYPE_PHYSICAL);

	if (GetAttribute (attacker, ATTRIBUTEID_ANATOMY))
		if (RandomInt (1000) < GetAttribute (attacker, ATTRIBUTEID_ANATOMY))
			SendSysMessage (attacker, "Critical hit!");
			if (CheckSkill (attacker, SKILLID_ANATOMY, 80, 0) )
				DoDamageByType (attacker, defender, modified_damage, DAMAGETYPE_PHYSICAL);
			else
				DoDamageByType (attacker, defender, CINT (modified_damage/2), DAMAGETYPE_PHYSICAL);
			endif
		endif
	endif

	return 1;
endprogram




///////////////////
//  Perform the attack animation for both players and NPCs.  If the graphic of the attacker isn't
//  a normal human, different animations need to be used
///////////////////

function PerformAttackAnimation ()
	//If they're not human, use different attack animations based on their graphic
	if (attacker.graphic != 400 and attacker.graphic != 401 and attacker.graphic != 605 and attacker.graphic != 606 and attacker.graphic != 666 and attacker.graphic != 667 and attacker.graphic != 744 and attacker.graphic != 745)
		case (attacker.graphic)
			CID_ALLIGATOR:
			CID_PIG:
			CID_BROWN_BEAR:
			CID_GRIZZLY_BEAR:
			CID_POLAR_BEAR:
			CID_BOAR:
			CID_BUNNY:
			CID_CAT:
			CID_DOG:
			CID_WOLF:
			CID_COW:
			CID_COW2:
			CID_BULL:
			CID_BULL2:
			CID_CHICKEN:
			CID_GOAT:
			CID_RAT:
			CID_GIANT_RAT:
			CID_PANTHER:
				PerformAction (attacker, (RandomInt (3) + 5));
			CID_EAGLE:
				PerformAction (attacker, 4);
			default:
				PerformAction (attacker, (RandomInt (3) + 4));
		endcase
	
		return;
	endif

	//Wrestling animations for humans
//	var mount := GetEquipmentByLayer (attacker, LAYER_MOUNT);
//	if (mount)
//		PerformAction (attacker, 0x09, 7);
//		return;
//	endif
//	if (RandomInt (2))
//		PerformAction (attacker, 0x0A, 7);
//		return;
//	else
//		PerformAction (attacker, 0x0B, 7);
//		return;
//	endif
	if(attacker.graphic == 666 or attacker.graphic == 667)
		NewPerformAction(attacker, 0, 4, RandomInt(3));
		return;
	endif
	NewPerformAction(attacker, 0, 3+RandomInt(3), 0);
	return;
endfunction




///////////////////
//  Calculate the odds of a successful attack
//////////////////

function CalculateToHitChance ()
	//First calculate the weaponskills for the attacker and defender
	var attacker_weaponskill := 0;
	if (attacker.acctname)
		if (attacker_weapon)
			attacker_weaponskill := GetAttribute (attacker, (attacker_weapon.attribute));
		else
			attacker_weaponskill := GetAttribute (attacker, ATTRIBUTEID_WRESTLING);
		endif

		//Increased chance to hit for players
		if (attacker_weaponskill > 70)
			attacker_weaponskill := CINT (attacker_weaponskill * 1.3);
		endif
	else
		if (attacker_weapon)
			attacker_weaponskill := GetAttribute (attacker, (attacker_weapon.attribute));
		else
			attacker_weaponskill := GetAttribute (attacker, attacker_npcdesc_elem.AttackAttribute);
		endif
		if (!attacker_weaponskill)
			attacker_weaponskill := GetAttribute (attacker, ATTRIBUTEID_WRESTLING);
		endif
	endif

	var defender_weaponskill := 0;
	if (defender.acctname)
		if (defender.weapon)
			defender_weaponskill := GetAttribute (defender, (defender.weapon.attribute));
		else
			defender_weaponskill := GetAttribute (defender, ATTRIBUTEID_WRESTLING);
		endif

		//Increased chance of being missed for players
		if (defender_weaponskill > 70)
			defender_weaponskill := CINT (defender_weaponskill * 1.20);
		endif
	else
		if (defender.weapon)
			defender_weaponskill := GetAttribute (defender, (defender.weapon.attribute));
		else
			defender_weaponskill := GetAttribute (defender, defender_npcdesc_elem.AttackAttribute);
		endif
		if (!defender_weaponskill)
			defender_weaponskill := GetAttribute (defender, ATTRIBUTEID_WRESTLING);
		endif
	endif

	var chance_to_hit := CINT (((attacker_weaponskill + 50)*50)/(defender_weaponskill + 50));

	//There's always a small chance to hit
	if (!chance_to_hit)
		chance_to_hit := 1;
	endif

	//Player made exceptional items have a slightly higher chance to hit
	if (attacker_weapon)
		var l_name := Lower (attacker_weapon.desc);
		if (l_name ["xceptional"])
			chance_to_hit := chance_to_hit + 5;
		endif
	endif

	//Silver weapons give bonus to hit against undead
	if (GetObjProperty (attacker_weapon, "silver") ) 
		if (IsAnUndeadCreature (defender.npctemplate))
			chance_to_hit := chance_to_hit + 5;
		endif
	endif

	//Special bonus to hit from some spells.  Set up as an array - {amount, endtime, name (for .status)}
	if (GetObjProperty (attacker, "#combat_to_hit_bonus"))
		var bonus_to_hit := GetObjProperty (attacker, "#combat_to_hit_bonus");
		var endtime := bonus_to_hit[2];
		if (endtime and endtime < ReadGameClock())
			EraseObjProperty (attacker, "#combat_to_hit_bonus");
		else
			chance_to_hit := chance_to_hit + bonus_to_hit[1];
		endif
	endif

	return chance_to_hit;
endfunction




///////////////////
//  Figures out the raw weapon damage, unmodified by tactics, armor, etc
///////////////////

function CalculateAttackDamage ()
	var wrest := GetAttribute (attacker, ATTRIBUTEID_WRESTLING);
	var dicestring := "1d8";
	if (wrest > 110)
		dicestring := "5d6+9";
	elseif (wrest > 100)
		dicestring := "5d6+6";
	elseif (wrest > 90)
		dicestring := "4d6+6";
	elseif (wrest > 80)
		dicestring := "3d6+3";
	elseif (wrest > 70)
		dicestring := "2d6+3";
	endif
	
	var raw_damage := RandomDiceRoll (dicestring);
	return raw_damage;
endfunction




///////////////////
//  Miss!  Play a swoosh-type sound effect
///////////////////

function PlayMissSoundEffect ()
	PlaySoundEffect (attacker, 0x239);
	return 1;
endfunction




///////////////////
//  Hit!  Play the hit sound effect
///////////////////

function PlayHitSoundEffect ()
//	PlaySoundEffect (defender, 0x13E);
	PlaySoundEffect (defender, 0x534 + RandomInt(2));
	return 1;
endfunction


